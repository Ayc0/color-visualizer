{"mappings":"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","sources":["node_modules/@lit/reactive-element/src/css-tag.ts","node_modules/@lit/reactive-element/src/reactive-element.ts","node_modules/lit-html/src/lit-html.ts","node_modules/lit-element/src/lit-element.ts","node_modules/@lit/reactive-element/src/decorators/custom-element.ts","node_modules/@lit/reactive-element/src/decorators/property.ts","node_modules/@lit/reactive-element/src/decorators/state.ts","node_modules/@lit/reactive-element/src/decorators/base.ts","node_modules/@lit/reactive-element/src/decorators/query.ts","node_modules/@lit/reactive-element/src/decorators/query-assigned-nodes.ts","node_modules/manatea/src/index.ts","src/color-controllers.ts","node_modules/@parcel/runtime-js/lib/runtime-ad51bfcbb96d2963.js","node_modules/@parcel/runtime-js/lib/get-worker-url.js","node_modules/@parcel/runtime-js/lib/bundle-url.js","src/LCHPaint/generate-colors/index.ts","src/LCHPaint/LCHPaint.ts","node_modules/@lit/reactive-element/src/decorators/event-options.ts","src/ColorPicker/ColorSlider.ts","src/manatea-controller.ts","src/ColorPicker/ColorPicker.ts","src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets =\n  window.ShadowRoot &&\n  (window.ShadyCSS === undefined || window.ShadyCSS.nativeShadow) &&\n  'adoptedStyleSheets' in Document.prototype &&\n  'replace' in CSSStyleSheet.prototype;\n\nexport type CSSResultOrNative = CSSResult | CSSStyleSheet;\n\nexport type CSSResultFlatArray = CSSResultOrNative[];\n\nexport type CSSResultArray = Array<CSSResultOrNative | CSSResultArray>;\n\nexport type CSSResultGroup = CSSResultOrNative | CSSResultArray;\n\nconst constructionToken = Symbol();\n\nexport class CSSResult {\n  readonly cssText: string;\n  private _styleSheet?: CSSStyleSheet;\n\n  constructor(cssText: string, safeToken: symbol) {\n    if (safeToken !== constructionToken) {\n      throw new Error(\n        'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.'\n      );\n    }\n    this.cssText = cssText;\n  }\n\n  // Note, this is a getter so that it's lazy. In practice, this means\n  // stylesheets are not created until the first element instance is made.\n  get styleSheet(): CSSStyleSheet | undefined {\n    // Note, if `supportsAdoptingStyleSheets` is true then we assume\n    // CSSStyleSheet is constructable.\n    if (supportsAdoptingStyleSheets && this._styleSheet === undefined) {\n      this._styleSheet = new CSSStyleSheet();\n      this._styleSheet.replaceSync(this.cssText);\n    }\n    return this._styleSheet;\n  }\n\n  toString(): string {\n    return this.cssText;\n  }\n}\n\nconst cssResultCache = new Map<string, CSSResult>();\n\nconst getCSSResult = (cssText: string): CSSResult => {\n  let result = cssResultCache.get(cssText);\n  if (result === undefined) {\n    cssResultCache.set(\n      cssText,\n      (result = new CSSResult(cssText, constructionToken))\n    );\n  }\n  return result;\n};\n\nconst textFromCSSResult = (value: CSSResultGroup | number) => {\n  if (value instanceof CSSResult) {\n    return value.cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(\n      `Value passed to 'css' function must be a 'css' function result: ` +\n        `${value}. Use 'unsafeCSS' to pass non-literal values, but take care ` +\n        `to ensure page security.`\n    );\n  }\n};\n\n/**\n * Wrap a value for interpolation in a [[`css`]] tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value: unknown) => {\n  return getCSSResult(typeof value === 'string' ? value : String(value));\n};\n\n/**\n * Template tag which which can be used with LitElement's [[LitElement.styles |\n * `styles`]] property to set element styles. For security reasons, only literal\n * string values may be used. To incorporate non-literal values [[`unsafeCSS`]]\n * may be used inside a template string part.\n */\nexport const css = (\n  strings: TemplateStringsArray,\n  ...values: (CSSResultGroup | number)[]\n): CSSResultGroup => {\n  const cssText =\n    strings.length === 1\n      ? strings[0]\n      : values.reduce(\n          (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\n          strings[0]\n        );\n  return getCSSResult(cssText);\n};\n\n/**\n * Applies the given styles to a `shadowRoot`. When Shadow DOM is\n * available but `adoptedStyleSheets` is not, styles are appended to the\n * `shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n * Note, when shimming is used, any styles that are subsequently placed into\n * the shadowRoot should be placed *before* any shimmed adopted styles. This\n * will match spec behavior that gives adopted sheets precedence over styles in\n * shadowRoot.\n */\nexport const adoptStyles = (\n  renderRoot: ShadowRoot,\n  styles: CSSResultFlatArray\n) => {\n  if (supportsAdoptingStyleSheets) {\n    (renderRoot as ShadowRoot).adoptedStyleSheets = styles.map((s) =>\n      s instanceof CSSStyleSheet ? s : s.styleSheet!\n    );\n  } else {\n    styles.forEach((s) => {\n      const style = document.createElement('style');\n      style.textContent = (s as CSSResult).cssText;\n      renderRoot.appendChild(style);\n    });\n  }\n};\n\nconst cssResultFromStyleSheet = (sheet: CSSStyleSheet) => {\n  let cssText = '';\n  for (const rule of sheet.cssRules) {\n    cssText += rule.cssText;\n  }\n  return unsafeCSS(cssText);\n};\n\nexport const getCompatibleStyle = supportsAdoptingStyleSheets\n  ? (s: CSSResultOrNative) => s\n  : (s: CSSResultOrNative) =>\n      s instanceof CSSStyleSheet ? cssResultFromStyleSheet(s) : s;\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Use this module if you want to create your own base class extending\n * [[ReactiveElement]].\n * @packageDocumentation\n */\n\nimport {\n  getCompatibleStyle,\n  adoptStyles,\n  CSSResultGroup,\n  CSSResultOrNative,\n  CSSResultFlatArray,\n} from './css-tag.js';\nimport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\nexport * from './css-tag.js';\nexport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\nconst DEV_MODE = true;\n\nlet requestUpdateThenable: {\n  then: (\n    onfulfilled?: (value: boolean) => void,\n    _onrejected?: () => void\n  ) => void;\n};\n\nif (DEV_MODE) {\n  // TODO(sorvell): Add a link to the docs about using dev v. production mode.\n  console.warn(`Running in dev mode. Do not use in production!`);\n\n  // Issue platform support warning.\n  if (\n    window.ShadyDOM?.inUse &&\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (globalThis as any)['reactiveElementPlatformSupport'] === undefined\n  ) {\n    console.warn(\n      `Shadow DOM is being polyfilled via ShadyDOM but ` +\n        `the \\`polyfill-support\\` module has not been loaded.`\n    );\n  }\n\n  requestUpdateThenable = {\n    then: (\n      onfulfilled?: (value: boolean) => void,\n      _onrejected?: () => void\n    ) => {\n      console.warn(\n        `\\`requestUpdate\\` no longer returns a Promise.` +\n          `Use \\`updateComplete\\` instead.`\n      );\n      if (onfulfilled !== undefined) {\n        onfulfilled(false);\n      }\n    },\n  };\n}\n\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n/*@__INLINE__*/\nconst JSCompiler_renameProperty = <P extends PropertyKey>(\n  prop: P,\n  _obj: unknown\n): P => prop;\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\n  /**\n   * Function called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string | null, type?: TypeHint): Type;\n\n  /**\n   * Function called to convert a property value to an attribute\n   * value.\n   *\n   * It returns unknown instead of string, to be compatible with\n   * https://github.com/WICG/trusted-types (and similar efforts).\n   */\n  toAttribute?(value: Type, type?: TypeHint): unknown;\n}\n\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\n  | ComplexAttributeConverter<Type>\n  | ((value: string | null, type?: TypeHint) => Type);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\n  /**\n   * When set to `true`, indicates the property is internal private state. The\n   * property should not be set by users. When using TypeScript, this property\n   * should be marked as `private` or `protected`, and it is also a common\n   * practice to use a leading `_` in the name. The property is not added to\n   * `observedAttributes`.\n   */\n  readonly state?: boolean;\n\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  readonly attribute?: boolean | string;\n\n  /**\n   * Indicates the type of the property. This is used only as a hint for the\n   * `converter` to determine how to convert the attribute\n   * to/from a property.\n   */\n  readonly type?: TypeHint;\n\n  /**\n   * Indicates how to convert the attribute to/from a property. If this value\n   * is a function, it is used to convert the attribute value a the property\n   * value. If it's an object, it can have keys for `fromAttribute` and\n   * `toAttribute`. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute. A default `converter` is used if none is provided; it supports\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\n   * when a property changes and the converter is used to update the attribute,\n   * the property is never updated again as a result of the attribute changing,\n   * and vice versa.\n   */\n  readonly converter?: AttributeConverter<Type, TypeHint>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property converted using the rules\n   * from the `converter` property option.\n   */\n  readonly reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n\n  /**\n   * Indicates whether an accessor will be created for this property. By\n   * default, an accessor will be generated for this property that requests an\n   * update when set. If this flag is `true`, no accessor will be created, and\n   * it will be the user's responsibility to call\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\n   * the property changes.\n   */\n  readonly noAccessor?: boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  readonly [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\n/**\n * Map of changed properties with old values. Takes an optional generic\n * interface corresponding to the declared element properties.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type PropertyValues<T = any> = keyof T extends PropertyKey\n  ? Map<keyof T, unknown>\n  : never;\n\nexport const defaultConverter: ComplexAttributeConverter = {\n  toAttribute(value: unknown, type?: unknown): unknown {\n    switch (type) {\n      case Boolean:\n        value = value ? '' : null;\n        break;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        value = value == null ? value : JSON.stringify(value);\n        break;\n    }\n    return value;\n  },\n\n  fromAttribute(value: string | null, type?: unknown) {\n    let fromValue: unknown = value;\n    switch (type) {\n      case Boolean:\n        fromValue = value !== null;\n        break;\n      case Number:\n        fromValue = value === null ? null : Number(value);\n        break;\n      case Object:\n      case Array:\n        // Do *not* generate exception when invalid JSON is set as elements\n        // don't normally complain on being mis-configured.\n        // TODO(sorvell): Do generate exception in *dev mode*.\n        try {\n          // Assert to adhere to Bazel's \"must type assert JSON parse\" rule.\n          fromValue = JSON.parse(value!) as unknown;\n        } catch (e) {\n          fromValue = null;\n        }\n        break;\n    }\n    return fromValue;\n  },\n};\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean => {\n  // This ensures (old==NaN, value==NaN) always returns false\n  return old !== value && (old === old || value === value);\n};\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual,\n};\n\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n\n/**\n * A string representing one of the supported dev mode warnings classes.\n */\nexport type WarningKind = 'change-in-update' | 'migration';\n\nexport type Initializer = (element: ReactiveElement) => void;\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n * @noInheritDoc\n */\nexport abstract class ReactiveElement\n  extends HTMLElement\n  implements ReactiveControllerHost {\n  // Note: these are patched in only in DEV_MODE.\n  /**\n   * Read or set all the enabled warning kinds for this class.\n   *\n   * This property is only used in development builds.\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enabledWarnings?: WarningKind[];\n\n  /**\n   * Enable the given warning kind for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Enable for all ReactiveElement classes\n   * ReactiveElement.enableWarning.?('migration');\n   *\n   * // Enable for all MyElement only\n   * MyElement.enableWarning.?('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Disable the given warning kind for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Disable for all ReactiveElement classes\n   * ReactiveElement.disableWarning.?('migration');\n   *\n   * // Disable for all MyElement only\n   * MyElement.disableWarning.?('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static disableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * @nocollapse\n   */\n  static addInitializer(initializer: Initializer) {\n    this._initializers ??= [];\n    this._initializers.push(initializer);\n  }\n\n  static _initializers?: Initializer[];\n\n  /*\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\n   * all static methods and properties with initializers.  Reference:\n   * - https://github.com/google/closure-compiler/issues/1776\n   */\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute to\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\n   * class.\n   * @nocollapse\n   */\n  private static __attributeToPropertyMap: AttributeMap;\n\n  /**\n   * Marks class as having finished creating properties.\n   */\n  protected static [finalized] = true;\n\n  /**\n   * Memoized list of all element properties, including any superclass properties.\n   * Created lazily on user subclasses when finalizing the class.\n   * @nocollapse\n   * @category properties\n   */\n  static elementProperties: PropertyDeclarationMap = new Map();\n\n  /**\n   * User-supplied object that maps property names to `PropertyDeclaration`\n   * objects containing options for configuring reactive properties. When\n   * a reactive property is set the element will update and render.\n   *\n   * By default properties are public fields, and as such, they should be\n   * considered as primarily settable by element users, either via attribute or\n   * the property itself.\n   *\n   * Generally, properties that are changed by the element should be private or\n   * protected fields and should use the `state: true` option. Properties\n   * marked as `state` do not reflect from the corresponding attribute\n   *\n   * However, sometimes element code does need to set a public property. This\n   * should typically only be done in response to user interaction, and an event\n   * should be fired informing the user; for example, a checkbox sets its\n   * `checked` property when clicked and fires a `changed` event. Mutating\n   * public properties should typically not be done for non-primitive (object or\n   * array) properties. In other cases when an element needs to manage state, a\n   * private property set with the `state: true` option should be used. When\n   * needed, state properties can be initialized via public properties to\n   * facilitate complex interactions.\n   * @nocollapse\n   * @category properties\n   */\n  static properties: PropertyDeclarations;\n\n  /**\n   * Memoized list of all element styles.\n   * Created lazily on user subclasses when finalizing the class.\n   * @nocollapse\n   * @category styles\n   */\n  static elementStyles: CSSResultFlatArray = [];\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the [[`css`]] tag function or via constructible stylesheets.\n   * @nocollapse\n   * @category styles\n   */\n  static styles?: CSSResultGroup;\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   * @category attributes\n   */\n  static get observedAttributes() {\n    // note: piggy backing on this to ensure we're finalized.\n    this.finalize();\n    const attributes: string[] = [];\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    this.elementProperties.forEach((v, p) => {\n      const attr = this.__attributeNameForProperty(p, v);\n      if (attr !== undefined) {\n        this.__attributeToPropertyMap.set(attr, p);\n        attributes.push(attr);\n      }\n    });\n    return attributes;\n  }\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist\n   * and stores a PropertyDeclaration for the property with the given options.\n   * The property setter calls the property's `hasChanged` property option\n   * or uses a strict identity check to determine whether or not to request\n   * an update.\n   *\n   * This method may be overridden to customize properties; however,\n   * when doing so, it's important to call `super.createProperty` to ensure\n   * the property is setup correctly. This method calls\n   * `getPropertyDescriptor` internally to get a descriptor to install.\n   * To customize what properties do when they are get or set, override\n   * `getPropertyDescriptor`. To customize the options for a property,\n   * implement `createProperty` like this:\n   *\n   * static createProperty(name, options) {\n   *   options = Object.assign(options, {myOption: true});\n   *   super.createProperty(name, options);\n   * }\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static createProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration = defaultPropertyDeclaration\n  ) {\n    // if this is a state property, force the attribute to false.\n    if (options.state) {\n      // Cast as any since this is readonly.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (options as any).attribute = false;\n    }\n    // Note, since this can be called by the `@property` decorator which\n    // is called before `finalize`, we ensure finalization has been kicked off.\n    this.finalize();\n    this.elementProperties.set(name, options);\n    // Do not generate an accessor if the prototype already has one, since\n    // it would be lost otherwise and that would never be the user's intention;\n    // Instead, we expect users to call `requestUpdate` themselves from\n    // user-defined accessors. Note that if the super has an accessor we will\n    // still overwrite it\n    if (!options.noAccessor && !this.prototype.hasOwnProperty(name)) {\n      const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n      const descriptor = this.getPropertyDescriptor(name, key, options);\n      if (descriptor !== undefined) {\n        Object.defineProperty(this.prototype, name, descriptor);\n      }\n    }\n  }\n\n  /**\n   * Returns a property descriptor to be defined on the given named property.\n   * If no descriptor is returned, the property will not become an accessor.\n   * For example,\n   *\n   *   class MyElement extends LitElement {\n   *     static getPropertyDescriptor(name, key, options) {\n   *       const defaultDescriptor =\n   *           super.getPropertyDescriptor(name, key, options);\n   *       const setter = defaultDescriptor.set;\n   *       return {\n   *         get: defaultDescriptor.get,\n   *         set(value) {\n   *           setter.call(this, value);\n   *           // custom action.\n   *         },\n   *         configurable: true,\n   *         enumerable: true\n   *       }\n   *     }\n   *   }\n   *\n   * @nocollapse\n   * @category properties\n   */\n  protected static getPropertyDescriptor(\n    name: PropertyKey,\n    key: string | symbol,\n    options: PropertyDeclaration\n  ) {\n    return {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      get(): any {\n        return (this as {[key: string]: unknown})[key as string];\n      },\n      set(this: ReactiveElement, value: unknown) {\n        const oldValue = ((this as {}) as {[key: string]: unknown})[\n          name as string\n        ];\n        ((this as {}) as {[key: string]: unknown})[key as string] = value;\n        ((this as unknown) as ReactiveElement).requestUpdate(\n          name,\n          oldValue,\n          options\n        );\n      },\n      configurable: true,\n      enumerable: true,\n    };\n  }\n\n  /**\n   * Returns the property options associated with the given property.\n   * These options are defined with a PropertyDeclaration via the `properties`\n   * object or the `@property` decorator and are registered in\n   * `createProperty(...)`.\n   *\n   * Note, this method should be considered \"final\" and not overridden. To\n   * customize the options for a given property, override `createProperty`.\n   *\n   * @nocollapse\n   * @final\n   * @category properties\n   */\n  protected static getPropertyOptions(name: PropertyKey) {\n    return this.elementProperties.get(name) || defaultPropertyDeclaration;\n  }\n\n  /**\n   * Creates property accessors for registered properties, sets up element\n   * styling, and ensures any superclasses are also finalized. Returns true if\n   * the element was finalized.\n   * @nocollapse\n   */\n  protected static finalize() {\n    if (this.hasOwnProperty(finalized)) {\n      return false;\n    }\n    this[finalized] = true;\n    // finalize any superclasses\n    const superCtor = Object.getPrototypeOf(this) as typeof ReactiveElement;\n    superCtor.finalize();\n    this.elementProperties = new Map(superCtor.elementProperties);\n    // initialize Map populated in observedAttributes\n    this.__attributeToPropertyMap = new Map();\n    // make any properties\n    // Note, only process \"own\" properties since this element will inherit\n    // any properties defined on the superClass, and finalization ensures\n    // the entire prototype chain is finalized.\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      // support symbols in properties (IE11 does not support this)\n      const propKeys = [\n        ...Object.getOwnPropertyNames(props),\n        ...Object.getOwnPropertySymbols(props),\n      ];\n      // This for/of is ok because propKeys is an array\n      for (const p of propKeys) {\n        // note, use of `any` is due to TypeScript lack of support for symbol in\n        // index types\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.createProperty(p, (props as any)[p]);\n      }\n    }\n    this.elementStyles = this.finalizeStyles(this.styles);\n    // DEV mode warnings\n    if (DEV_MODE) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnRemoved = (obj: any, name: string) => {\n        if (obj[name] !== undefined) {\n          console.warn(\n            `\\`${name}\\` is implemented. It ` +\n              `has been removed from this version of ReactiveElement.` +\n              ` See the changelog at https://github.com/lit/lit/blob/main/packages/reactive-element/CHANGELOG.md`\n          );\n        }\n      };\n      [`initialize`, `requestUpdateInternal`, `_getUpdateComplete`].forEach(\n        (name: string) =>\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          warnRemoved(this.prototype as any, name)\n      );\n    }\n    return true;\n  }\n\n  /**\n   * Options used when calling `attachShadow`. Set this property to customize\n   * the options for the shadowRoot; for example, to create a closed\n   * shadowRoot: `{mode: 'closed'}`.\n   *\n   * Note, these options are used in `createRenderRoot`. If this method\n   * is customized, options should be respected if possible.\n   * @nocollapse\n   * @category rendering\n   */\n  static shadowRootOptions: ShadowRootInit = {mode: 'open'};\n\n  /**\n   * Takes the styles the user supplied via the `static styles` property and\n   * returns the array of styles to apply to the element.\n   * Override this method to integrate into a style management system.\n   *\n   * Styles are deduplicated preserving the _last_ instance in the list. This\n   * is a performance optimization to avoid duplicated styles that can occur\n   * especially when composing via subclassing. The last item is kept to try\n   * to preserve the cascade order with the assumption that it's most important\n   * that last added styles override previous styles.\n   *\n   * @nocollapse\n   * @category styles\n   */\n  protected static finalizeStyles(styles?: CSSResultGroup): CSSResultFlatArray {\n    const elementStyles = [];\n    if (Array.isArray(styles)) {\n      // Dedupe the flattened array in reverse order to preserve the last items.\n      // TODO(sorvell): casting to Array<unknown> works around TS error that\n      // appears to come from trying to flatten a type CSSResultArray.\n      const set = new Set((styles as Array<unknown>).flat(Infinity).reverse());\n      // Then preserve original order by adding the set items in reverse order.\n      for (const s of set) {\n        elementStyles.unshift(getCompatibleStyle(s as CSSResultOrNative));\n      }\n    } else if (styles !== undefined) {\n      elementStyles.push(getCompatibleStyle(styles));\n    }\n    return elementStyles;\n  }\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   * @category rendering\n   */\n  readonly renderRoot!: HTMLElement | ShadowRoot;\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  private static __attributeNameForProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration\n  ) {\n    const attribute = options.attribute;\n    return attribute === false\n      ? undefined\n      : typeof attribute === 'string'\n      ? attribute\n      : typeof name === 'string'\n      ? name.toLowerCase()\n      : undefined;\n  }\n\n  private __instanceProperties?: PropertyValues = new Map();\n  // Initialize to an unresolved Promise so we can make sure the element has\n  // connected before first update.\n  private __updatePromise!: Promise<boolean>;\n\n  private __pendingConnectionPromise: Promise<void> | undefined = undefined;\n  private __enableConnection: (() => void) | undefined = undefined;\n\n  /**\n   * @category updates\n   */\n  isUpdatePending = false;\n\n  /**\n   * @category updates\n   */\n  hasUpdated = false;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   *\n   * @internal\n   */\n  _$changedProperties!: PropertyValues;\n\n  /**\n   * Map with keys of properties that should be reflected when updated.\n   */\n  private __reflectingProperties?: Map<PropertyKey, PropertyDeclaration>;\n\n  /**\n   * Name of currently reflecting property\n   */\n  private __reflectingProperty: PropertyKey | null = null;\n\n  /**\n   * Set of controllers.\n   */\n  private __controllers?: ReactiveController[];\n\n  constructor() {\n    super();\n    this._initialize();\n  }\n\n  /**\n   * Internal only override point for customizing work done when elements\n   * are constructed.\n   *\n   * @internal\n   */\n  _initialize() {\n    this.__updatePromise = new Promise<boolean>(\n      (res) => (this.enableUpdating = res)\n    );\n    this._$changedProperties = new Map();\n    this.__saveInstanceProperties();\n    // ensures first update will be caught by an early access of\n    // `updateComplete`\n    this.requestUpdate();\n    (this.constructor as typeof ReactiveElement)._initializers?.forEach((i) =>\n      i(this)\n    );\n  }\n\n  /**\n   * @category controllers\n   */\n  addController(controller: ReactiveController) {\n    (this.__controllers ??= []).push(controller);\n    // If a controller is added after the element has been connected,\n    // call hostConnected. Note, re-using existence of `renderRoot` here\n    // (which is set in connectedCallback) to avoid the need to track a\n    // first connected state.\n    if (this.renderRoot !== undefined && this.isConnected) {\n      controller.hostConnected?.();\n    }\n  }\n\n  /**\n   * @category controllers\n   */\n  removeController(controller: ReactiveController) {\n    // Note, if the indexOf is -1, the >>> will flip the sign which makes the\n    // splice do nothing.\n    this.__controllers?.splice(this.__controllers.indexOf(controller) >>> 0, 1);\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private __saveInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    (this.constructor as typeof ReactiveElement).elementProperties.forEach(\n      (_v, p) => {\n        if (this.hasOwnProperty(p)) {\n          this.__instanceProperties!.set(p, this[p as keyof this]);\n          delete this[p as keyof this];\n        }\n      }\n    );\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   *\n   * @return Returns a node into which to render.\n   * @category rendering\n   */\n  protected createRenderRoot(): Element | ShadowRoot {\n    const renderRoot =\n      this.shadowRoot ??\n      this.attachShadow(\n        (this.constructor as typeof ReactiveElement).shadowRootOptions\n      );\n    adoptStyles(\n      renderRoot,\n      (this.constructor as typeof ReactiveElement).elementStyles\n    );\n    return renderRoot;\n  }\n\n  /**\n   * On first connection, creates the element's renderRoot, sets up\n   * element styling, and enables updating.\n   * @category lifecycle\n   */\n  connectedCallback() {\n    // create renderRoot before first update.\n    if (this.renderRoot === undefined) {\n      (this as {\n        renderRoot: Element | DocumentFragment;\n      }).renderRoot = this.createRenderRoot();\n    }\n    this.enableUpdating(true);\n    this.__controllers?.forEach((c) => c.hostConnected?.());\n    // If we were disconnected, re-enable updating by resolving the pending\n    // connection promise\n    if (this.__enableConnection) {\n      this.__enableConnection();\n      this.__pendingConnectionPromise = this.__enableConnection = undefined;\n    }\n  }\n\n  /**\n   * Note, this method should be considered final and not overridden. It is\n   * overridden on the element instance with a function that triggers the first\n   * update.\n   * @category updates\n   */\n  protected enableUpdating(_requestedUpdate: boolean) {}\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   * @category lifecycle\n   */\n  disconnectedCallback() {\n    this.__controllers?.forEach((c) => c.hostDisconnected?.());\n    this.__pendingConnectionPromise = new Promise(\n      (r) => (this.__enableConnection = r)\n    );\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   * @category attributes\n   */\n  attributeChangedCallback(\n    name: string,\n    _old: string | null,\n    value: string | null\n  ) {\n    this._$attributeToProperty(name, value);\n  }\n\n  private __propertyToAttribute(\n    name: PropertyKey,\n    value: unknown,\n    options: PropertyDeclaration = defaultPropertyDeclaration\n  ) {\n    const attr = (this\n      .constructor as typeof ReactiveElement).__attributeNameForProperty(\n      name,\n      options\n    );\n    if (attr !== undefined && options.reflect === true) {\n      const toAttribute =\n        (options.converter as ComplexAttributeConverter)?.toAttribute ??\n        defaultConverter.toAttribute;\n      const attrValue = toAttribute!(value, options.type);\n      if (\n        DEV_MODE &&\n        (this.constructor as typeof ReactiveElement).enabledWarnings!.indexOf(\n          'migration'\n        ) >= 0 &&\n        attrValue === undefined\n      ) {\n        console.warn(\n          `The attribute value for the ` +\n            `${name as string} property is undefined. The attribute will be ` +\n            `removed, but in the previous version of ReactiveElement, the ` +\n            `attribute would not have changed.`\n        );\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this.__reflectingProperty = name;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue as string);\n      }\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /** @internal */\n  _$attributeToProperty(name: string, value: string | null) {\n    const ctor = this.constructor as typeof ReactiveElement;\n    // Note, hint this as an `AttributeMap` so closure clearly understands\n    // the type; it has issues with tracking types through statics\n    const propName = (ctor.__attributeToPropertyMap as AttributeMap).get(name);\n    // Use tracking info to avoid reflecting a property value to an attribute\n    // if it was just set because the attribute changed.\n    if (propName !== undefined && this.__reflectingProperty !== propName) {\n      const options = ctor.getPropertyOptions(propName);\n      const converter = options.converter;\n      const fromAttribute =\n        (converter as ComplexAttributeConverter)?.fromAttribute ??\n        (typeof converter === 'function'\n          ? (converter as (value: string | null, type?: unknown) => unknown)\n          : null) ??\n        defaultConverter.fromAttribute;\n      // mark state reflecting\n      this.__reflectingProperty = propName;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this[propName as keyof this] = fromAttribute!(value, options.type) as any;\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should be called\n   * when an element should update based on some state not triggered by setting\n   * a reactive property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored.\n   *\n   * @param name name of requesting property\n   * @param oldValue old value of requesting property\n   * @param options property options to use instead of the previously\n   *     configured options\n   * @category updates\n   */\n  requestUpdate(\n    name?: PropertyKey,\n    oldValue?: unknown,\n    options?: PropertyDeclaration\n  ): void {\n    let shouldRequestUpdate = true;\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      options =\n        options ||\n        (this.constructor as typeof ReactiveElement).getPropertyOptions(name);\n      const hasChanged = options.hasChanged || notEqual;\n      if (hasChanged(this[name as keyof this], oldValue)) {\n        if (!this._$changedProperties.has(name)) {\n          this._$changedProperties.set(name, oldValue);\n        }\n        // Add to reflecting properties set.\n        // Note, it's important that every change has a chance to add the\n        // property to `_reflectingProperties`. This ensures setting\n        // attribute + property reflects correctly.\n        if (options.reflect === true && this.__reflectingProperty !== name) {\n          if (this.__reflectingProperties === undefined) {\n            this.__reflectingProperties = new Map();\n          }\n          this.__reflectingProperties.set(name, options);\n        }\n      } else {\n        // Abort the request if the property should not be considered changed.\n        shouldRequestUpdate = false;\n      }\n    }\n    if (!this.isUpdatePending && shouldRequestUpdate) {\n      this.__updatePromise = this.__enqueueUpdate();\n    }\n    // Note, since this no longer returns a promise, in dev mode we return a\n    // thenable which warns if it's called.\n    return DEV_MODE ? ((requestUpdateThenable as unknown) as void) : undefined;\n  }\n\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  private async __enqueueUpdate() {\n    this.isUpdatePending = true;\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await this.__updatePromise;\n      // If we were disconnected, wait until re-connected to flush an update\n      while (this.__pendingConnectionPromise) {\n        await this.__pendingConnectionPromise;\n      }\n    } catch (e) {\n      // Refire any previous errors async so they do not disrupt the update\n      // cycle. Errors are refired so developers have a chance to observe\n      // them, and this can be done by implementing\n      // `window.onunhandledrejection`.\n      Promise.reject(e);\n    }\n    const result = this.performUpdate();\n    // If `performUpdate` returns a Promise, we await it. This is done to\n    // enable coordinating updates with a scheduler. Note, the result is\n    // checked to avoid delaying an additional microtask unless we need to.\n    if (result != null) {\n      await result;\n    }\n    return !this.isUpdatePending;\n  }\n\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * You can override this method to change the timing of updates. If this\n   * method is overridden, `super.performUpdate()` must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```\n   * protected async performUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.performUpdate();\n   * }\n   * ```\n   * @category updates\n   */\n  protected performUpdate(): void | Promise<unknown> {\n    // Abort any update if one is not pending when this is called.\n    // This can happen if `performUpdate` is called early to \"flush\"\n    // the update.\n    if (!this.isUpdatePending) {\n      return;\n    }\n    // create renderRoot before first update.\n    if (!this.hasUpdated) {\n      // Produce warning if any class properties are shadowed by class fields\n      if (DEV_MODE) {\n        const shadowedProperties: string[] = [];\n        (this.constructor as typeof ReactiveElement).elementProperties.forEach(\n          (_v, p) => {\n            if (this.hasOwnProperty(p) && !this.__instanceProperties?.has(p)) {\n              shadowedProperties.push(p as string);\n            }\n          }\n        );\n        if (shadowedProperties.length) {\n          // TODO(sorvell): Link to docs explanation of this issue.\n          console.warn(\n            `The following properties will not trigger updates as expected ` +\n              `because they are set using class fields: ` +\n              `${shadowedProperties.join(', ')}. ` +\n              `Native class fields and some compiled output will overwrite ` +\n              `accessors used for detecting changes. To fix this issue, ` +\n              `either initialize properties in the constructor or adjust ` +\n              `your compiler settings; for example, for TypeScript set ` +\n              `\\`useDefineForClassFields: false\\` in your \\`tsconfig.json\\`.`\n          );\n        }\n      }\n    }\n    // Mixin instance properties once, if they exist.\n    if (this.__instanceProperties) {\n      // Use forEach so this works even if for/of loops are compiled to for loops\n      // expecting arrays\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.__instanceProperties!.forEach((v, p) => ((this as any)[p] = v));\n      this.__instanceProperties = undefined;\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._$changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.willUpdate(changedProperties);\n        this.__controllers?.forEach((c) => c.hostUpdate?.());\n        this.update(changedProperties);\n      } else {\n        this.__markUpdated();\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      // Ensure element can accept additional updates after an exception.\n      this.__markUpdated();\n      throw e;\n    }\n    // The update is no longer considered pending and further updates are now allowed.\n    if (shouldUpdate) {\n      this._$didUpdate(changedProperties);\n    }\n  }\n\n  /**\n   * @category updates\n   */\n  willUpdate(_changedProperties: PropertyValues) {}\n\n  // Note, this is an override point for polyfill-support.\n  // @internal\n  _$didUpdate(changedProperties: PropertyValues) {\n    this.__controllers?.forEach((c) => c.hostUpdated?.());\n    if (!this.hasUpdated) {\n      this.hasUpdated = true;\n      this.firstUpdated(changedProperties);\n    }\n    this.updated(changedProperties);\n    if (\n      DEV_MODE &&\n      this.isUpdatePending &&\n      (this.constructor as typeof ReactiveElement).enabledWarnings!.indexOf(\n        'change-in-update'\n      ) >= 0\n    ) {\n      console.warn(\n        `An update was requested (generally because a property was set) ` +\n          `after an update completed, causing a new update to be scheduled. ` +\n          `This is inefficient and should be avoided unless the next update ` +\n          `can only be scheduled as a side effect of the previous update.`\n      );\n    }\n  }\n\n  private __markUpdated() {\n    this._$changedProperties = new Map();\n    this.isUpdatePending = false;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update.\n   *\n   * To await additional asynchronous work, override the `getUpdateComplete`\n   * method. For example, it is sometimes useful to await a rendered element\n   * before fulfilling this Promise. To do this, first await\n   * `super.getUpdateComplete()`, then any subsequent state.\n   *\n   * @return A promise of a boolean that indicates if the update resolved\n   *     without triggering another update.\n   * @category updates\n   */\n  get updateComplete(): Promise<boolean> {\n    return this.getUpdateComplete();\n  }\n\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   *   class MyElement extends LitElement {\n   *     async getUpdateComplete() {\n   *       await super.getUpdateComplete();\n   *       await this._myChild.updateComplete;\n   *     }\n   *   }\n   * @category updates\n   */\n  protected getUpdateComplete(): Promise<boolean> {\n    return this.__updatePromise;\n  }\n\n  /**\n   * Controls whether or not `update` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected update(_changedProperties: PropertyValues) {\n    if (this.__reflectingProperties !== undefined) {\n      // Use forEach so this works even if for/of loops are compiled to for\n      // loops expecting arrays\n      this.__reflectingProperties.forEach((v, k) =>\n        this.__propertyToAttribute(k, this[k as keyof this], v)\n      );\n      this.__reflectingProperties = undefined;\n    }\n    this.__markUpdated();\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected updated(_changedProperties: PropertyValues) {}\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {}\n}\n\n// Apply polyfills if available\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(globalThis as any)['reactiveElementPlatformSupport']?.({ReactiveElement});\n\n// Dev mode warnings...\nif (DEV_MODE) {\n  // Default warning set.\n  ReactiveElement.enabledWarnings = ['change-in-update'];\n  const ensureOwnWarnings = function (ctor: typeof ReactiveElement) {\n    if (\n      !ctor.hasOwnProperty(JSCompiler_renameProperty('enabledWarnings', ctor))\n    ) {\n      ctor.enabledWarnings = ctor.enabledWarnings!.slice();\n    }\n  };\n  ReactiveElement.enableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    if (this.enabledWarnings!.indexOf(warning) < 0) {\n      this.enabledWarnings!.push(warning);\n    }\n  };\n  ReactiveElement.disableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    const i = this.enabledWarnings!.indexOf(warning);\n    if (i >= 0) {\n      this.enabledWarnings!.splice(i, 1);\n    }\n  };\n}\n\ndeclare global {\n  interface Window {\n    reactiveElementVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for ReactiveElement usage.\n// TODO(justinfagnani): inject version number at build time\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n((globalThis as any)['reactiveElementVersions'] ??= []).push('1.0.0-rc.2');\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// IMPORTANT: these imports must be type-only\nimport type {Directive, DirectiveResult, PartInfo} from './directive.js';\n\nconst DEV_MODE = true;\nconst ENABLE_EXTRA_SECURITY_HOOKS = true;\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nif (DEV_MODE) {\n  console.warn('lit-html is in dev mode. Not recommended for production!');\n}\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\nconst trustedTypes = ((globalThis as unknown) as Partial<Window>).trustedTypes;\n\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = trustedTypes\n  ? trustedTypes.createPolicy('lit-html', {\n      createHTML: (s) => s,\n    })\n  : undefined;\n\n/**\n * Used to sanitize any value before it is written into the DOM. This can be\n * used to implement a security policy of allowed and disallowed values in\n * order to prevent XSS attacks.\n *\n * One way of using this callback would be to check attributes and properties\n * against a list of high risk fields, and require that values written to such\n * fields be instances of a class which is safe by construction. Closure's Safe\n * HTML Types is one implementation of this technique (\n * https://github.com/google/safe-html-types/blob/master/doc/safehtml-types.md).\n * The TrustedTypes polyfill in API-only mode could also be used as a basis\n * for this technique (https://github.com/WICG/trusted-types).\n *\n * @param node The HTML node (usually either a #text node or an Element) that\n *     is being written to. Note that this is just an exemplar node, the write\n *     may take place against another instance of the same class of node.\n * @param name The name of an attribute or property (for example, 'href').\n * @param type Indicates whether the write that's about to be performed will\n *     be to a property or a node.\n * @return A function that will sanitize this class of writes.\n */\nexport type SanitizerFactory = (\n  node: Node,\n  name: string,\n  type: 'property' | 'attribute'\n) => ValueSanitizer;\n\n/**\n * A function which can sanitize values that will be written to a specific kind\n * of DOM sink.\n *\n * See SanitizerFactory.\n *\n * @param value The value to sanitize. Will be the actual value passed into\n *     the lit-html template literal, so this could be of any type.\n * @return The value to write to the DOM. Usually the same as the input value,\n *     unless sanitization is needed.\n */\nexport type ValueSanitizer = (value: unknown) => unknown;\n\nconst identityFunction: ValueSanitizer = (value: unknown) => value;\nconst noopSanitizer: SanitizerFactory = (\n  _node: Node,\n  _name: string,\n  _type: 'property' | 'attribute'\n) => identityFunction;\n\n/** Sets the global sanitizer factory. */\nconst setSanitizer = (newSanitizer: SanitizerFactory) => {\n  if (!ENABLE_EXTRA_SECURITY_HOOKS) {\n    return;\n  }\n  if (sanitizerFactoryInternal !== noopSanitizer) {\n    throw new Error(\n      `Attempted to overwrite existing lit-html security policy.` +\n        ` setSanitizeDOMValueFactory should be called at most once.`\n    );\n  }\n  sanitizerFactoryInternal = newSanitizer;\n};\n\n/**\n * Only used in internal tests, not a part of the public API.\n */\nconst _testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {\n  sanitizerFactoryInternal = noopSanitizer;\n};\n\nconst createSanitizer: SanitizerFactory = (node, name, type) => {\n  return sanitizerFactoryInternal(node, name, type);\n};\n\n// Added to an attribute name to mark the attribute as bound so we can find\n// it easily.\nconst boundAttributeSuffix = '$lit$';\n\n// This marker is used in many syntactic positions in HTML, so it must be\n// a valid element name and attribute name. We don't support dynamic names (yet)\n// but this at least ensures that the parse tree is closer to the template\n// intention.\nconst marker = `lit$${String(Math.random()).slice(9)}$`;\n\n// String used to tell if a comment is a marker comment\nconst markerMatch = '?' + marker;\n\n// Text used to insert a comment marker node. We use processing instruction\n// syntax because it's slightly smaller, but parses as a comment node.\nconst nodeMarker = `<${markerMatch}>`;\n\nconst d = document;\n\n// Creates a dynamic marker. We never have to search for these in the DOM.\nconst createMarker = (v = '') => d.createComment(v);\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\nconst isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\nconst isArray = Array.isArray;\nconst isIterable = (value: unknown): value is Iterable<unknown> =>\n  isArray(value) ||\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  typeof (value as any)?.[Symbol.iterator] === 'function';\n\nconst SPACE_CHAR = `[ \\t\\n\\f\\r]`;\nconst ATTR_VALUE_CHAR = `[^ \\t\\n\\f\\r\"'\\`<>=]`;\nconst NAME_CHAR = `[^\\\\s\"'>=/]`;\n\n// These regexes represent the five parsing states that we care about in the\n// Template's HTML scanner. They match the *end* of the state they're named\n// after.\n// Depending on the match, we transition to a new state. If there's no match,\n// we stay in the same state.\n// Note that the regexes are stateful. We utilize lastIndex and sync it\n// across the multiple regexes used. In addition to the five regexes below\n// we also dynamically create a regex to find the matching end tags for raw\n// text elements.\n\n/**\n * End of text is: `<` followed by:\n *   (comment start) or (tag) or (dynamic tag binding)\n */\nconst textEndRegex = /<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g;\nconst COMMENT_START = 1;\nconst TAG_NAME = 2;\nconst DYNAMIC_TAG_NAME = 3;\n\nconst commentEndRegex = /-->/g;\n/**\n * Comments not started with <!--, like </{, can be ended by a single `>`\n */\nconst comment2EndRegex = />/g;\n\n/**\n * The tagEnd regex matches the end of the \"inside an opening\" tag syntax\n * position. It either matches a `>`, an attribute-like sequence, or the end\n * of the string after a space (attribute-name position ending).\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\t\\n\\f\\r\" are HTML space characters:\n * https://infra.spec.whatwg.org/#ascii-whitespace\n *\n * So an attribute is:\n *  * The name: any character except a whitespace character, (\"), ('), \">\",\n *    \"=\", or \"/\". Note: this is different from the HTML spec which also excludes control characters.\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst tagEndRegex = new RegExp(\n  `>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|(\"|')|))|$)`,\n  'g'\n);\nconst ENTIRE_MATCH = 0;\nconst ATTRIBUTE_NAME = 1;\nconst SPACES_AND_EQUALS = 2;\nconst QUOTE_CHAR = 3;\n\nconst singleQuoteAttrEndRegex = /'/g;\nconst doubleQuoteAttrEndRegex = /\"/g;\n/**\n * Matches the raw text elements.\n *\n * Comments are not parsed within raw text elements, so we need to search their\n * text content for marker strings.\n */\nconst rawTextElement = /^(?:script|style|textarea)$/i;\n\n/** TemplateResult types */\nconst HTML_RESULT = 1;\nconst SVG_RESULT = 2;\n\ntype ResultType = typeof HTML_RESULT | typeof SVG_RESULT;\n\n// TemplatePart types\n// IMPORTANT: these must match the values in PartType\nconst ATTRIBUTE_PART = 1;\nconst CHILD_PART = 2;\nconst PROPERTY_PART = 3;\nconst BOOLEAN_ATTRIBUTE_PART = 4;\nconst EVENT_PART = 5;\nconst ELEMENT_PART = 6;\nconst COMMENT_PART = 7;\n\n/**\n * The return type of the template tag functions.\n */\nexport type TemplateResult<T extends ResultType = ResultType> = {\n  _$litType$: T;\n  // TODO (justinfagnani): consider shorter names, like `s` and `v`. This is a\n  // semi-public API though. We can't just let Terser rename them for us,\n  // because we need TemplateResults to work between compatible versions of\n  // lit-html.\n  strings: TemplateStringsArray;\n  values: unknown[];\n};\n\nexport type HTMLTemplateResult = TemplateResult<typeof HTML_RESULT>;\n\nexport type SVGTemplateResult = TemplateResult<typeof SVG_RESULT>;\n\nexport interface CompiledTemplateResult {\n  // This is a factory in order to make template initialization lazy\n  // and allow ShadyRenderOptions scope to be passed in.\n  _$litType$: CompiledTemplate;\n  values: unknown[];\n}\n\nexport interface CompiledTemplate extends Omit<Template, 'el'> {\n  // el is overridden to be optional. We initialize it on first render\n  el?: HTMLTemplateElement;\n\n  // The prepared HTML string to create a template element from.\n  h: TrustedHTML;\n}\n\n/**\n * Generates a template literal tag function that returns a TemplateResult with\n * the given result type.\n */\nconst tag = <T extends ResultType>(_$litType$: T) => (\n  strings: TemplateStringsArray,\n  ...values: unknown[]\n): TemplateResult<T> => ({\n  _$litType$,\n  strings,\n  values,\n});\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = tag(HTML_RESULT);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = tag(SVG_RESULT);\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = Symbol.for('lit-noChange');\n\n/**\n * A sentinel value that signals a ChildPart to fully clear its content.\n */\nexport const nothing = Symbol.for('lit-nothing');\n\n/**\n * The cache of prepared templates, keyed by the tagged TemplateStringsArray\n * and _not_ accounting for the specific template tag used. This means that\n * template tags cannot be dynamic - the must statically be one of html, svg,\n * or attr. This restriction simplifies the cache lookup, which is on the hot\n * path for rendering.\n */\nconst templateCache = new WeakMap<TemplateStringsArray, Template>();\n\nexport interface RenderOptions {\n  /**\n   * An object to use as the `this` value for event listeners. It's often\n   * useful to set this to the host component rendering a template.\n   */\n  host?: object;\n  /**\n   * A DOM node before which to render content in the container.\n   */\n  renderBefore?: ChildNode | null;\n  /**\n   * Node used for cloning the template (`importNode` will be called on this\n   * node). This controls the `ownerDocument` of the rendered DOM, along with\n   * any inherited context. Defaults to the global `document`.\n   */\n  creationScope?: {importNode(node: Node, deep?: boolean): Node};\n}\n\n/**\n * Renders a value, usually a lit-html TemplateResult, to the container.\n * @param value\n * @param container\n * @param options\n */\nexport const render = (\n  value: unknown,\n  container: HTMLElement | DocumentFragment,\n  options?: RenderOptions\n): ChildPart => {\n  const partOwnerNode = options?.renderBefore ?? container;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let part: ChildPart = (partOwnerNode as any)._$litPart$;\n  if (part === undefined) {\n    const endNode = options?.renderBefore ?? null;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (partOwnerNode as any)._$litPart$ = part = new ChildPart(\n      container.insertBefore(createMarker(), endNode),\n      endNode,\n      undefined,\n      options\n    );\n  }\n  part._$setValue(value);\n  return part;\n};\n\nif (ENABLE_EXTRA_SECURITY_HOOKS) {\n  render.setSanitizer = setSanitizer;\n  render.createSanitizer = createSanitizer;\n  if (DEV_MODE) {\n    render._testOnlyClearSanitizerFactoryDoNotCallOrElse = _testOnlyClearSanitizerFactoryDoNotCallOrElse;\n  }\n}\n\nconst walker = d.createTreeWalker(\n  d,\n  129 /* NodeFilter.SHOW_{ELEMENT|COMMENT} */,\n  null,\n  false\n);\n\nlet sanitizerFactoryInternal: SanitizerFactory = noopSanitizer;\n\n//\n// Classes only below here, const variable declarations only above here...\n//\n// Keeping variable declarations and classes together improves minification.\n// Interfaces and type aliases can be interleaved freely.\n//\n\n// Type for classes that have a `_directive` or `_directives[]` field, used by\n// `resolveDirective`\nexport interface DirectiveParent {\n  _$parent?: DirectiveParent;\n  __directive?: Directive;\n  __directives?: Array<Directive | undefined>;\n}\n\n/**\n * Returns an HTML string for the given TemplateStringsArray and result type\n * (HTML or SVG), along with the case-sensitive bound attribute names in\n * template order. The HTML contains comment comment markers denoting the\n * `ChildPart`s and suffixes on bound attributes denoting the `AttributeParts`.\n *\n * @param strings template strings array\n * @param type HTML or SVG\n * @return Array containing `[html, attrNames]` (array returned for terseness,\n *     to avoid object fields since this code is shared with non-minified SSR\n *     code)\n */\nconst getTemplateHtml = (\n  strings: TemplateStringsArray,\n  type: ResultType\n): [TrustedHTML, Array<string | undefined>] => {\n  // Insert makers into the template HTML to represent the position of\n  // bindings. The following code scans the template strings to determine the\n  // syntactic position of the bindings. They can be in text position, where\n  // we insert an HTML comment, attribute value position, where we insert a\n  // sentinel string and re-write the attribute name, or inside a tag where\n  // we insert the sentinel string.\n  const l = strings.length - 1;\n  // Stores the case-sensitive bound attribute names in the order of their\n  // parts. ElementParts are also reflected in this array as undefined\n  // rather than a string, to disambiguate from attribute bindings.\n  const attrNames: Array<string | undefined> = [];\n  let html = type === SVG_RESULT ? '<svg>' : '';\n\n  // When we're inside a raw text tag (not it's text content), the regex\n  // will still be tagRegex so we can find attributes, but will switch to\n  // this regex when the tag ends.\n  let rawTextEndRegex: RegExp | undefined;\n\n  // The current parsing state, represented as a reference to one of the\n  // regexes\n  let regex = textEndRegex;\n\n  for (let i = 0; i < l; i++) {\n    const s = strings[i];\n    // The index of the end of the last attribute name. When this is\n    // positive at end of a string, it means we're in an attribute value\n    // position and need to rewrite the attribute name.\n    // We also use a special value of -2 to indicate that we encountered\n    // the end of a string in attribute name position.\n    let attrNameEndIndex = -1;\n    let attrName: string | undefined;\n    let lastIndex = 0;\n    let match!: RegExpExecArray | null;\n\n    // The conditions in this loop handle the current parse state, and the\n    // assignments to the `regex` variable are the state transitions.\n    while (lastIndex < s.length) {\n      // Make sure we start searching from where we previously left off\n      regex.lastIndex = lastIndex;\n      match = regex.exec(s);\n      if (match === null) {\n        break;\n      }\n      lastIndex = regex.lastIndex;\n      if (regex === textEndRegex) {\n        if (match[COMMENT_START] === '!--') {\n          regex = commentEndRegex;\n        } else if (match[COMMENT_START] !== undefined) {\n          // We started a weird comment, like </{\n          regex = comment2EndRegex;\n        } else if (match[TAG_NAME] !== undefined) {\n          if (rawTextElement.test(match[TAG_NAME])) {\n            // Record if we encounter a raw-text element. We'll switch to\n            // this regex at the end of the tag.\n            rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, 'g');\n          }\n          regex = tagEndRegex;\n        } else if (match[DYNAMIC_TAG_NAME] !== undefined) {\n          // dynamic tag name\n          regex = tagEndRegex;\n        }\n      } else if (regex === tagEndRegex) {\n        if (match[ENTIRE_MATCH] === '>') {\n          // End of a tag. If we had started a raw-text element, use that\n          // regex\n          regex = rawTextEndRegex ?? textEndRegex;\n          // We may be ending an unquoted attribute value, so make sure we\n          // clear any pending attrNameEndIndex\n          attrNameEndIndex = -1;\n        } else if (match[ATTRIBUTE_NAME] === undefined) {\n          // Attribute name position\n          attrNameEndIndex = -2;\n        } else {\n          attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;\n          attrName = match[ATTRIBUTE_NAME];\n          regex =\n            match[QUOTE_CHAR] === undefined\n              ? tagEndRegex\n              : match[QUOTE_CHAR] === '\"'\n              ? doubleQuoteAttrEndRegex\n              : singleQuoteAttrEndRegex;\n        }\n      } else if (\n        regex === doubleQuoteAttrEndRegex ||\n        regex === singleQuoteAttrEndRegex\n      ) {\n        regex = tagEndRegex;\n      } else if (regex === commentEndRegex || regex === comment2EndRegex) {\n        regex = textEndRegex;\n      } else {\n        // Not one of the five state regexes, so it must be the dynamically\n        // created raw text regex and we're at the close of that element.\n        regex = tagEndRegex;\n        rawTextEndRegex = undefined;\n      }\n    }\n\n    if (DEV_MODE) {\n      // If we have a attrNameEndIndex, which indicates that we should\n      // rewrite the attribute name, assert that we're in a valid attribute\n      // position - either in a tag, or a quoted attribute value.\n      console.assert(\n        attrNameEndIndex === -1 ||\n          regex === tagEndRegex ||\n          regex === singleQuoteAttrEndRegex ||\n          regex === doubleQuoteAttrEndRegex,\n        'unexpected parse state B'\n      );\n    }\n\n    // We have four cases:\n    //  1. We're in text position, and not in a raw text element\n    //     (regex === textEndRegex): insert a comment marker.\n    //  2. We have a non-negative attrNameEndIndex which means we need to\n    //     rewrite the attribute name to add a bound attribute suffix.\n    //  3. We're at the non-first binding in a multi-binding attribute, use a\n    //     plain marker.\n    //  4. We're somewhere else inside the tag. If we're in attribute name\n    //     position (attrNameEndIndex === -2), add a sequential suffix to\n    //     generate a unique attribute name.\n\n    // Detect a binding next to self-closing tag end and insert a space to\n    // separate the marker from the tag end:\n    const end =\n      regex === tagEndRegex && strings[i + 1].startsWith('/>') ? ' ' : '';\n    html +=\n      regex === textEndRegex\n        ? s + nodeMarker\n        : attrNameEndIndex >= 0\n        ? (attrNames.push(attrName!),\n          s.slice(0, attrNameEndIndex) +\n            boundAttributeSuffix +\n            s.slice(attrNameEndIndex)) +\n          marker +\n          end\n        : s +\n          marker +\n          (attrNameEndIndex === -2 ? (attrNames.push(undefined), i) : end);\n  }\n\n  const htmlResult: string | TrustedHTML =\n    html + (strings[l] || '<?>') + (type === SVG_RESULT ? '</svg>' : '');\n\n  // Returned as an array for terseness\n  return [\n    policy !== undefined\n      ? policy.createHTML(htmlResult)\n      : ((htmlResult as unknown) as TrustedHTML),\n    attrNames,\n  ];\n};\n\n/** @internal */\nexport type {Template};\nclass Template {\n  /** @internal */\n  el!: HTMLTemplateElement;\n  /** @internal */\n  parts: Array<TemplatePart> = [];\n\n  constructor(\n    {strings, _$litType$: type}: TemplateResult,\n    options?: RenderOptions\n  ) {\n    let node: Node | null;\n    let nodeIndex = 0;\n    let attrNameIndex = 0;\n    const partCount = strings.length - 1;\n    const parts = this.parts;\n\n    // Create template element\n    const [html, attrNames] = getTemplateHtml(strings, type);\n    this.el = Template.createElement(html, options);\n    walker.currentNode = this.el.content;\n\n    // Reparent SVG nodes into template root\n    if (type === SVG_RESULT) {\n      const content = this.el.content;\n      const svgElement = content.firstChild!;\n      svgElement.remove();\n      content.append(...svgElement.childNodes);\n    }\n\n    // Walk the template to find binding markers and create TemplateParts\n    while ((node = walker.nextNode()) !== null && parts.length < partCount) {\n      if (node.nodeType === 1) {\n        // TODO (justinfagnani): for attempted dynamic tag names, we don't\n        // increment the bindingIndex, and it'll be off by 1 in the element\n        // and off by two after it.\n        if ((node as Element).hasAttributes()) {\n          // We defer removing bound attributes because on IE we might not be\n          // iterating attributes in their template order, and would sometimes\n          // remove an attribute that we still need to create a part for.\n          const attrsToRemove = [];\n          for (const name of (node as Element).getAttributeNames()) {\n            // `name` is the name of the attribute we're iterating over, but not\n            // _neccessarily_ the name of the attribute we will create a part\n            // for. They can be different in browsers that don't iterate on\n            // attributes in source order. In that case the attrNames array\n            // contains the attribute name we'll process next. We only need the\n            // attribute name here to know if we should process a bound attribute\n            // on this element.\n            if (\n              name.endsWith(boundAttributeSuffix) ||\n              name.startsWith(marker)\n            ) {\n              const realName = attrNames[attrNameIndex++];\n              attrsToRemove.push(name);\n              if (realName !== undefined) {\n                // Lowercase for case-sensitive SVG attributes like viewBox\n                const value = (node as Element).getAttribute(\n                  realName.toLowerCase() + boundAttributeSuffix\n                )!;\n                const statics = value.split(marker);\n                const m = /([.?@])?(.*)/.exec(realName)!;\n                parts.push({\n                  type: ATTRIBUTE_PART,\n                  index: nodeIndex,\n                  name: m[2],\n                  strings: statics,\n                  ctor:\n                    m[1] === '.'\n                      ? PropertyPart\n                      : m[1] === '?'\n                      ? BooleanAttributePart\n                      : m[1] === '@'\n                      ? EventPart\n                      : AttributePart,\n                });\n              } else {\n                parts.push({\n                  type: ELEMENT_PART,\n                  index: nodeIndex,\n                });\n              }\n            }\n          }\n          for (const name of attrsToRemove) {\n            (node as Element).removeAttribute(name);\n          }\n        }\n        // TODO (justinfagnani): benchmark the regex against testing for each\n        // of the 3 raw text element names.\n        if (rawTextElement.test((node as Element).tagName)) {\n          // For raw text elements we need to split the text content on\n          // markers, create a Text node for each segment, and create\n          // a TemplatePart for each marker.\n          const strings = (node as Element).textContent!.split(marker);\n          const lastIndex = strings.length - 1;\n          if (lastIndex > 0) {\n            (node as Element).textContent = trustedTypes\n              ? ((trustedTypes.emptyScript as unknown) as '')\n              : '';\n            // Generate a new text node for each literal section\n            // These nodes are also used as the markers for node parts\n            // We can't use empty text nodes as markers because they're\n            // normalized in some browsers (TODO: check)\n            for (let i = 0; i < lastIndex; i++) {\n              (node as Element).append(strings[i], createMarker());\n              // Walk past the marker node we just added\n              walker.nextNode();\n              parts.push({type: CHILD_PART, index: ++nodeIndex});\n            }\n            // Note because this marker is added after the walker's current\n            // node, it will be walked to in the outer loop (and ignored), so\n            // we don't need to adjust nodeIndex here\n            (node as Element).append(strings[lastIndex], createMarker());\n          }\n        }\n      } else if (node.nodeType === 8) {\n        const data = (node as Comment).data;\n        if (data === markerMatch) {\n          parts.push({type: CHILD_PART, index: nodeIndex});\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            // TODO (justinfagnani): consider whether it's even worth it to\n            // make bindings in comments work\n            parts.push({type: COMMENT_PART, index: nodeIndex});\n            // Move to the end of the match\n            i += marker.length - 1;\n          }\n        }\n      }\n      nodeIndex++;\n    }\n  }\n\n  // Overridden via `litHtmlPlatformSupport` to provide platform support.\n  static createElement(html: TrustedHTML, _options?: RenderOptions) {\n    const el = d.createElement('template');\n    el.innerHTML = (html as unknown) as string;\n    return el;\n  }\n}\n\nexport interface Disconnectable {\n  _$parent?: Disconnectable;\n  _$disconnectableChildren?: Set<Disconnectable>;\n}\n\nfunction resolveDirective(\n  part: ChildPart | AttributePart | ElementPart,\n  value: unknown,\n  parent: DirectiveParent = part,\n  attributeIndex?: number\n): unknown {\n  // Bail early if the value is explicitly noChange. Note, this means any\n  // nested directive is still attached and is not run.\n  if (value === noChange) {\n    return value;\n  }\n  let currentDirective =\n    attributeIndex !== undefined\n      ? (parent as AttributePart).__directives?.[attributeIndex]\n      : (parent as ChildPart | ElementPart | Directive).__directive;\n  const nextDirectiveConstructor = isPrimitive(value)\n    ? undefined\n    : (value as DirectiveResult)._$litDirective$;\n  if (currentDirective?.constructor !== nextDirectiveConstructor) {\n    currentDirective?._$setDirectiveConnected?.(false);\n    if (nextDirectiveConstructor === undefined) {\n      currentDirective = undefined;\n    } else {\n      currentDirective = new nextDirectiveConstructor(part as PartInfo);\n      currentDirective._$initialize(part, parent, attributeIndex);\n    }\n    if (attributeIndex !== undefined) {\n      ((parent as AttributePart).__directives ??= [])[\n        attributeIndex\n      ] = currentDirective;\n    } else {\n      (parent as ChildPart | Directive).__directive = currentDirective;\n    }\n  }\n  if (currentDirective !== undefined) {\n    value = resolveDirective(\n      part,\n      currentDirective._$resolve(part, (value as DirectiveResult).values),\n      currentDirective,\n      attributeIndex\n    );\n  }\n  return value;\n}\n\n/**\n * An updateable instance of a Template. Holds references to the Parts used to\n * update the template instance.\n */\nclass TemplateInstance {\n  /** @internal */\n  _$template: Template;\n  /** @internal */\n  _parts: Array<Part | undefined> = [];\n\n  /** @internal */\n  _$parent: Disconnectable;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  constructor(template: Template, parent: ChildPart) {\n    this._$template = template;\n    this._$parent = parent;\n  }\n\n  // This method is separate from the constructor because we need to return a\n  // DocumentFragment and we don't want to hold onto it with an instance field.\n  _clone(options: RenderOptions | undefined) {\n    const {\n      el: {content},\n      parts: parts,\n    } = this._$template;\n    const fragment = (options?.creationScope ?? d).importNode(content, true);\n    walker.currentNode = fragment;\n\n    let node = walker.nextNode()!;\n    let nodeIndex = 0;\n    let partIndex = 0;\n    let templatePart = parts[0];\n\n    while (templatePart !== undefined) {\n      if (nodeIndex === templatePart.index) {\n        let part: Part | undefined;\n        if (templatePart.type === CHILD_PART) {\n          part = new ChildPart(\n            node as HTMLElement,\n            node.nextSibling,\n            this,\n            options\n          );\n        } else if (templatePart.type === ATTRIBUTE_PART) {\n          part = new templatePart.ctor(\n            node as HTMLElement,\n            templatePart.name,\n            templatePart.strings,\n            this,\n            options\n          );\n        } else if (templatePart.type === ELEMENT_PART) {\n          part = new ElementPart(node as HTMLElement, this, options);\n        }\n        this._parts.push(part);\n        templatePart = parts[++partIndex];\n      }\n      if (nodeIndex !== templatePart?.index) {\n        node = walker.nextNode()!;\n        nodeIndex++;\n      }\n    }\n    return fragment;\n  }\n\n  _update(values: Array<unknown>) {\n    let i = 0;\n    for (const part of this._parts) {\n      if (part !== undefined) {\n        if ((part as AttributePart).strings !== undefined) {\n          (part as AttributePart)._$setValue(values, part as AttributePart, i);\n          // The number of values the part consumes is part.strings.length - 1\n          // since values are in between template spans. We increment i by 1\n          // later in the loop, so increment it by part.strings.length - 2 here\n          i += (part as AttributePart).strings!.length - 2;\n        } else {\n          part._$setValue(values[i]);\n        }\n      }\n      i++;\n    }\n  }\n}\n\n/*\n * Parts\n */\ntype AttributeTemplatePart = {\n  readonly type: typeof ATTRIBUTE_PART;\n  readonly index: number;\n  readonly name: string;\n  /** @internal */\n  readonly ctor: typeof AttributePart;\n  /** @internal */\n  readonly strings: ReadonlyArray<string>;\n};\ntype NodeTemplatePart = {\n  readonly type: typeof CHILD_PART;\n  readonly index: number;\n};\ntype ElementTemplatePart = {\n  readonly type: typeof ELEMENT_PART;\n  readonly index: number;\n};\ntype CommentTemplatePart = {\n  readonly type: typeof COMMENT_PART;\n  readonly index: number;\n};\n\n/**\n * A TemplatePart represents a dynamic part in a template, before the template\n * is instantiated. When a template is instantiated Parts are created from\n * TemplateParts.\n */\ntype TemplatePart =\n  | NodeTemplatePart\n  | AttributeTemplatePart\n  | ElementTemplatePart\n  | CommentTemplatePart;\n\nexport type Part =\n  | ChildPart\n  | AttributePart\n  | PropertyPart\n  | BooleanAttributePart\n  | ElementPart\n  | EventPart;\n\nexport type {ChildPart};\nclass ChildPart {\n  readonly type = CHILD_PART;\n  readonly options: RenderOptions | undefined;\n  _$committedValue: unknown;\n  /** @internal */\n  __directive?: Directive;\n  /** @internal */\n  _$startNode: ChildNode;\n  /** @internal */\n  _$endNode: ChildNode | null;\n  private _textSanitizer: ValueSanitizer | undefined;\n  /** @internal */\n  _$parent: Disconnectable | undefined;\n\n  // The following fields will be patched onto ChildParts when required by\n  // AsyncDirective\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /** @internal */\n  _$setChildPartConnected?(\n    isConnected: boolean,\n    removeFromParent?: boolean,\n    from?: number\n  ): void;\n  /** @internal */\n  _$reparentDisconnectables?(parent: Disconnectable): void;\n\n  constructor(\n    startNode: ChildNode,\n    endNode: ChildNode | null,\n    parent: TemplateInstance | ChildPart | undefined,\n    options: RenderOptions | undefined\n  ) {\n    this._$startNode = startNode;\n    this._$endNode = endNode;\n    this._$parent = parent;\n    this.options = options;\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      // Explicitly initialize for consistent class shape.\n      this._textSanitizer = undefined;\n    }\n  }\n\n  /**\n   * Sets the connection state for any `AsyncDirectives` contained\n   * within this part and runs their `disconnected` or `reconnected`, according\n   * to the `isConnected` argument.\n   */\n  setConnected(isConnected: boolean) {\n    this._$setChildPartConnected?.(isConnected);\n  }\n\n  /**\n   * The parent node into which the part renders its content.\n   *\n   * A ChildPart's content consists of a range of adjacent child nodes of\n   * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n   * `.endNode`).\n   *\n   * - If both `.startNode` and `.endNode` are non-null, then the part's content\n   * consists of all siblings between `.startNode` and `.endNode`, exclusively.\n   *\n   * - If `.startNode` is non-null but `.endNode` is null, then the part's\n   * content consists of all siblings following `.startNode`, up to and\n   * including the last child of `.parentNode`. If `.endNode` is non-null, then\n   * `.startNode` will always be non-null.\n   *\n   * - If both `.endNode` and `.startNode` are null, then the part's content\n   * consists of all child nodes of `.parentNode`.\n   */\n  get parentNode(): Node {\n    return wrap(this._$startNode).parentNode!;\n  }\n\n  /**\n   * The part's leading marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get startNode(): Node | null {\n    return this._$startNode;\n  }\n\n  /**\n   * The part's trailing marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get endNode(): Node | null {\n    return this._$endNode;\n  }\n\n  _$setValue(value: unknown, directiveParent: DirectiveParent = this): void {\n    value = resolveDirective(this, value, directiveParent);\n    if (isPrimitive(value)) {\n      // Non-rendering child values. It's important that these do not render\n      // empty text nodes to avoid issues with preventing default <slot>\n      // fallback content.\n      if (value === nothing || value == null || value === '') {\n        if (this._$committedValue !== nothing) {\n          this._$clear();\n        }\n        this._$committedValue = nothing;\n      } else if (value !== this._$committedValue && value !== noChange) {\n        this._commitText(value);\n      }\n    } else if ((value as TemplateResult)._$litType$ !== undefined) {\n      this._commitTemplateResult(value as TemplateResult);\n    } else if ((value as Node).nodeType !== undefined) {\n      this._commitNode(value as Node);\n    } else if (isIterable(value)) {\n      this._commitIterable(value);\n    } else {\n      // Fallback, will render the string representation\n      this._commitText(value);\n    }\n  }\n\n  private _insert<T extends Node>(node: T, ref = this._$endNode) {\n    return wrap(wrap(this._$startNode).parentNode!).insertBefore(node, ref);\n  }\n\n  private _commitNode(value: Node): void {\n    if (this._$committedValue !== value) {\n      this._$clear();\n      if (\n        ENABLE_EXTRA_SECURITY_HOOKS &&\n        sanitizerFactoryInternal !== noopSanitizer\n      ) {\n        const parentNodeName = this._$startNode.parentNode?.nodeName;\n        if (parentNodeName === 'STYLE' || parentNodeName === 'SCRIPT') {\n          this._insert(\n            new Text(\n              '/* lit-html will not write ' +\n                'TemplateResults to scripts and styles */'\n            )\n          );\n          return;\n        }\n      }\n      this._$committedValue = this._insert(value);\n    }\n  }\n\n  private _commitText(value: unknown): void {\n    const node = wrap(this._$startNode).nextSibling;\n    // TODO(justinfagnani): Can we just check if this._$committedValue is primitive?\n    if (\n      node !== null &&\n      node.nodeType === 3 /* Node.TEXT_NODE */ &&\n      (this._$endNode === null\n        ? wrap(node).nextSibling === null\n        : node === wrap(this._$endNode).previousSibling)\n    ) {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(node, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n      }\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      (node as Text).data = value as string;\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        const textNode = document.createTextNode('');\n        this._commitNode(textNode);\n        // When setting text content, for security purposes it matters a lot\n        // what the parent is. For example, <style> and <script> need to be\n        // handled with care, while <span> does not. So first we need to put a\n        // text node into the document, then we can sanitize its contentx.\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(textNode, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n        textNode.data = value as string;\n      } else {\n        this._commitNode(d.createTextNode(value as string));\n      }\n    }\n    this._$committedValue = value;\n  }\n\n  private _commitTemplateResult(\n    result: TemplateResult | CompiledTemplateResult\n  ): void {\n    const {values, _$litType$} = result;\n    // If $litType$ is a number, result is a plain TemplateResult and we get\n    // the template from the template cache. If not, result is a\n    // CompiledTemplateResult and _$litType$ is a CompiledTemplate and we need\n    // to create the <template> element the first time we see it.\n    const template: Template | CompiledTemplate =\n      typeof _$litType$ === 'number'\n        ? this._$getTemplate(result as TemplateResult)\n        : (_$litType$.el === undefined &&\n            (_$litType$.el = Template.createElement(\n              _$litType$.h,\n              this.options\n            )),\n          _$litType$);\n\n    if ((this._$committedValue as TemplateInstance)?._$template === template) {\n      (this._$committedValue as TemplateInstance)._update(values);\n    } else {\n      const instance = new TemplateInstance(template as Template, this);\n      const fragment = instance._clone(this.options);\n      instance._update(values);\n      this._commitNode(fragment);\n      this._$committedValue = instance;\n    }\n  }\n\n  // Overridden via `litHtmlPlatformSupport` to provide platform support.\n  /** @internal */\n  _$getTemplate(result: TemplateResult) {\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n      templateCache.set(result.strings, (template = new Template(result)));\n    }\n    return template;\n  }\n\n  private _commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If value is an array, then the previous render was of an\n    // iterable and value will contain the ChildParts from the previous\n    // render. If value is not an array, clear this part and make a new\n    // array for ChildParts.\n    if (!isArray(this._$committedValue)) {\n      this._$committedValue = [];\n      this._$clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this._$committedValue as ChildPart[];\n    let partIndex = 0;\n    let itemPart: ChildPart | undefined;\n\n    for (const item of value) {\n      if (partIndex === itemParts.length) {\n        // If no existing part, create a new one\n        // TODO (justinfagnani): test perf impact of always creating two parts\n        // instead of sharing parts between nodes\n        // https://github.com/lit/lit/issues/1266\n        itemParts.push(\n          (itemPart = new ChildPart(\n            this._insert(createMarker()),\n            this._insert(createMarker()),\n            this,\n            this.options\n          ))\n        );\n      } else {\n        // Reuse an existing part\n        itemPart = itemParts[partIndex];\n      }\n      itemPart._$setValue(item);\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // itemParts always have end nodes\n      this._$clear(\n        itemPart && wrap(itemPart._$endNode!).nextSibling,\n        partIndex\n      );\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n    }\n  }\n\n  /**\n   * Removes the nodes contained within this Part from the DOM.\n   *\n   * @param start Start node to clear from, for clearing a subset of the part's\n   *     DOM (used when truncating iterables)\n   * @param from  When `start` is specified, the index within the iterable from\n   *     which ChildParts are being removed, used for disconnecting directives in\n   *     those Parts.\n   *\n   * @internal\n   */\n  _$clear(\n    start: ChildNode | null = wrap(this._$startNode).nextSibling,\n    from?: number\n  ) {\n    this._$setChildPartConnected?.(false, true, from);\n    while (start && start !== this._$endNode) {\n      const n = wrap(start!).nextSibling;\n      (wrap(start!) as Element).remove();\n      start = n;\n    }\n  }\n}\n\nexport type {AttributePart};\nclass AttributePart {\n  readonly type = ATTRIBUTE_PART as\n    | typeof ATTRIBUTE_PART\n    | typeof PROPERTY_PART\n    | typeof BOOLEAN_ATTRIBUTE_PART\n    | typeof EVENT_PART;\n  readonly element: HTMLElement;\n  readonly name: string;\n  readonly options: RenderOptions | undefined;\n\n  /**\n   * If this attribute part represents an interpolation, this contains the\n   * static strings of the interpolation. For single-value, complete bindings,\n   * this is undefined.\n   */\n  readonly strings?: ReadonlyArray<string>;\n  /** @internal */\n  _$committedValue: unknown | Array<unknown> = nothing;\n  /** @internal */\n  __directives?: Array<Directive | undefined>;\n  /** @internal */\n  _$parent: Disconnectable | undefined;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  protected _sanitizer: ValueSanitizer | undefined;\n  /** @internal */\n  _setDirectiveConnected?: (\n    directive: Directive | undefined,\n    isConnected: boolean,\n    removeFromParent?: boolean\n  ) => void = undefined;\n\n  get tagName() {\n    return this.element.tagName;\n  }\n\n  constructor(\n    element: HTMLElement,\n    name: string,\n    strings: ReadonlyArray<string>,\n    parent: Disconnectable | undefined,\n    options: RenderOptions | undefined\n  ) {\n    this.element = element;\n    this.name = name;\n    this._$parent = parent;\n    this.options = options;\n    if (strings.length > 2 || strings[0] !== '' || strings[1] !== '') {\n      this._$committedValue = new Array(strings.length - 1).fill(nothing);\n      this.strings = strings;\n    } else {\n      this._$committedValue = nothing;\n    }\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      this._sanitizer = undefined;\n    }\n  }\n\n  /**\n   * Sets the value of this part by resolving the value from possibly multiple\n   * values and static strings and committing it to the DOM.\n   * If this part is single-valued, `this._strings` will be undefined, and the\n   * method will be called with a single value argument. If this part is\n   * multi-value, `this._strings` will be defined, and the method is called\n   * with the value array of the part's owning TemplateInstance, and an offset\n   * into the value array from which the values should be read.\n   * This method is overloaded this way to eliminate short-lived array slices\n   * of the template instance values, and allow a fast-path for single-valued\n   * parts.\n   *\n   * @param value The part value, or an array of values for multi-valued parts\n   * @param valueIndex the index to start reading values from. `undefined` for\n   *   single-valued parts\n   * @param noCommit causes the part to not commit its value to the DOM. Used\n   *   in hydration to prime attribute parts with their first-rendered value,\n   *   but not set the attribute, and in SSR to no-op the DOM operation and\n   *   capture the value for serialization.\n   *\n   * @internal\n   */\n  _$setValue(\n    value: unknown | Array<unknown>,\n    directiveParent: DirectiveParent = this,\n    valueIndex?: number,\n    noCommit?: boolean\n  ) {\n    const strings = this.strings;\n\n    // Whether any of the values has changed, for dirty-checking\n    let change = false;\n\n    if (strings === undefined) {\n      // Single-value binding case\n      value = resolveDirective(this, value, directiveParent, 0);\n      change =\n        !isPrimitive(value) ||\n        (value !== this._$committedValue && value !== noChange);\n      if (change) {\n        this._$committedValue = value;\n      }\n    } else {\n      // Interpolation case\n      const values = value as Array<unknown>;\n      value = strings[0];\n\n      let i, v;\n      for (i = 0; i < strings.length - 1; i++) {\n        v = resolveDirective(this, values[valueIndex! + i], directiveParent, i);\n\n        if (v === noChange) {\n          // If the user-provided value is `noChange`, use the previous value\n          v = (this._$committedValue as Array<unknown>)[i];\n        }\n        change ||=\n          !isPrimitive(v) || v !== (this._$committedValue as Array<unknown>)[i];\n        if (v === nothing) {\n          value = nothing;\n        } else if (value !== nothing) {\n          value += (v ?? '') + strings[i + 1];\n        }\n        // We always record each value, even if one is `nothing`, for future\n        // change detection.\n        (this._$committedValue as Array<unknown>)[i] = v;\n      }\n    }\n    if (change && !noCommit) {\n      this._commitValue(value);\n    }\n  }\n\n  /** @internal */\n  _commitValue(value: unknown) {\n    if (value === nothing) {\n      (wrap(this.element) as Element).removeAttribute(this.name);\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._sanitizer === undefined) {\n          this._sanitizer = sanitizerFactoryInternal(\n            this.element,\n            this.name,\n            'attribute'\n          );\n        }\n        value = this._sanitizer(value ?? '');\n      }\n      (wrap(this.element) as Element).setAttribute(\n        this.name,\n        (value ?? '') as string\n      );\n    }\n  }\n}\n\nexport type {PropertyPart};\nclass PropertyPart extends AttributePart {\n  readonly type = PROPERTY_PART;\n\n  /** @internal */\n  _commitValue(value: unknown) {\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      if (this._sanitizer === undefined) {\n        this._sanitizer = sanitizerFactoryInternal(\n          this.element,\n          this.name,\n          'property'\n        );\n      }\n      value = this._sanitizer(value);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.element as any)[this.name] = value === nothing ? undefined : value;\n  }\n}\n\nexport type {BooleanAttributePart};\nclass BooleanAttributePart extends AttributePart {\n  readonly type = BOOLEAN_ATTRIBUTE_PART;\n\n  /** @internal */\n  _commitValue(value: unknown) {\n    if (value && value !== nothing) {\n      (wrap(this.element) as Element).setAttribute(this.name, '');\n    } else {\n      (wrap(this.element) as Element).removeAttribute(this.name);\n    }\n  }\n}\n\ntype EventListenerWithOptions = EventListenerOrEventListenerObject &\n  Partial<AddEventListenerOptions>;\n\n/**\n * An AttributePart that manages an event listener via add/removeEventListener.\n *\n * This part works by adding itself as the event listener on an element, then\n * delegating to the value passed to it. This reduces the number of calls to\n * add/removeEventListener if the listener changes frequently, such as when an\n * inline function is used as a listener.\n *\n * Because event options are passed when adding listeners, we must take case\n * to add and remove the part as a listener when the event options change.\n */\nexport type {EventPart};\nclass EventPart extends AttributePart {\n  readonly type = EVENT_PART;\n\n  // EventPart does not use the base _$setValue/_resolveValue implementation\n  // since the dirty checking is more complex\n  /** @internal */\n  _$setValue(newListener: unknown, directiveParent: DirectiveParent = this) {\n    newListener =\n      resolveDirective(this, newListener, directiveParent, 0) ?? nothing;\n    if (newListener === noChange) {\n      return;\n    }\n    const oldListener = this._$committedValue;\n\n    // If the new value is nothing or any options change we have to remove the\n    // part as a listener.\n    const shouldRemoveListener =\n      (newListener === nothing && oldListener !== nothing) ||\n      (newListener as EventListenerWithOptions).capture !==\n        (oldListener as EventListenerWithOptions).capture ||\n      (newListener as EventListenerWithOptions).once !==\n        (oldListener as EventListenerWithOptions).once ||\n      (newListener as EventListenerWithOptions).passive !==\n        (oldListener as EventListenerWithOptions).passive;\n\n    // If the new value is not nothing and we removed the listener, we have\n    // to add the part as a listener.\n    const shouldAddListener =\n      newListener !== nothing &&\n      (oldListener === nothing || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n        this.name,\n        this,\n        oldListener as EventListenerWithOptions\n      );\n    }\n    if (shouldAddListener) {\n      // Beware: IE11 and Chrome 41 don't like using the listener as the\n      // options object. Figure out how to deal w/ this in IE11 - maybe\n      // patch addEventListener?\n      this.element.addEventListener(\n        this.name,\n        this,\n        newListener as EventListenerWithOptions\n      );\n    }\n    this._$committedValue = newListener;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this._$committedValue === 'function') {\n      // TODO (justinfagnani): do we need to default to this.element?\n      // It'll always be the same as `e.currentTarget`.\n      this._$committedValue.call(this.options?.host ?? this.element, event);\n    } else {\n      (this._$committedValue as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\nexport type {ElementPart};\nclass ElementPart {\n  readonly type = ELEMENT_PART;\n\n  /** @internal */\n  __directive?: Directive;\n\n  // This is to ensure that every Part has a _$committedValue\n  _$committedValue: undefined;\n\n  /** @internal */\n  _$parent: Disconnectable | undefined;\n\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  /** @internal */\n  _setDirectiveConnected?: (\n    directive: Directive | undefined,\n    isConnected: boolean,\n    removeFromParent?: boolean\n  ) => void = undefined;\n\n  options: RenderOptions | undefined;\n\n  constructor(\n    public element: Element,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    this._$parent = parent;\n    this.options = options;\n  }\n\n  _$setValue(value: unknown): void {\n    resolveDirective(this, value);\n  }\n}\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports  mangled in the\n * client side code, we export a _Σ object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-element, which re-exports all of lit-html.\n *\n * @private\n */\nexport const _Σ = {\n  // Used in lit-ssr\n  _boundAttributeSuffix: boundAttributeSuffix,\n  _marker: marker,\n  _markerMatch: markerMatch,\n  _HTML_RESULT: HTML_RESULT,\n  _getTemplateHtml: getTemplateHtml,\n  // Used in hydrate\n  _TemplateInstance: TemplateInstance,\n  _isIterable: isIterable,\n  _resolveDirective: resolveDirective,\n  // Used in tests and private-ssr-support\n  _ChildPart: ChildPart,\n  _AttributePart: AttributePart,\n  _BooleanAttributePart: BooleanAttributePart,\n  _EventPart: EventPart,\n  _PropertyPart: PropertyPart,\n  _ElementPart: ElementPart,\n};\n\n// Apply polyfills if available\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(globalThis as any)['litHtmlPlatformSupport']?.(Template, ChildPart);\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n((globalThis as any)['litHtmlVersions'] ??= []).push('2.0.0-rc.3');\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * The main LitElement module, which defines the [[`LitElement`]] base class and\n * related APIs.\n *\n *  LitElement components can define a template and a set of observed\n * properties. Changing an observed property triggers a re-render of the\n * element.\n *\n *  Import [[`LitElement`]] and [[`html`]] from this module to create a\n * component:\n *\n *  ```js\n * import {LitElement, html} from 'lit-element';\n *\n * class MyElement extends LitElement {\n *\n *   // Declare observed properties\n *   static get properties() {\n *     return {\n *       adjective: {}\n *     }\n *   }\n *\n *   constructor() {\n *     this.adjective = 'awesome';\n *   }\n *\n *   // Define the element's template\n *   render() {\n *     return html`<p>your ${adjective} template here</p>`;\n *   }\n * }\n *\n * customElements.define('my-element', MyElement);\n * ```\n *\n * `LitElement` extends [[`ReactiveElement`]] and adds lit-html templating.\n * The `ReactiveElement` class is provided for users that want to build\n * their own custom element base classes that don't use lit-html.\n *\n * @packageDocumentation\n */\nimport {PropertyValues, ReactiveElement} from '@lit/reactive-element';\nimport {render, RenderOptions, noChange, ChildPart} from 'lit-html';\nexport * from '@lit/reactive-element';\nexport * from 'lit-html';\n\n// For backwards compatibility export ReactiveElement as UpdatingElement. Note,\n// IE transpilation requires exporting like this.\nexport const UpdatingElement = ReactiveElement;\n\nconst DEV_MODE = true;\n\ndeclare global {\n  interface Window {\n    litElementVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n((globalThis as any)['litElementVersions'] ??= []).push('3.0.0-rc.2');\n\n/**\n * Base element class that manages element properties and attributes, and\n * renders a lit-html template.\n *\n * To define a component, subclass `LitElement` and implement a\n * `render` method to provide the component's template. Define properties\n * using the [[`properties`]] property or the [[`property`]] decorator.\n */\nexport class LitElement extends ReactiveElement {\n  /**\n   * Ensure this class is marked as `finalized` as an optimization ensuring\n   * it will not needlessly try to `finalize`.\n   *\n   * Note this property name is a string to prevent breaking Closure JS Compiler\n   * optimizations. See @lit/reactive-element for more information.\n   */\n  protected static ['finalized'] = true;\n\n  static _$litElement$ = true;\n\n  /**\n   * @category rendering\n   */\n  readonly renderOptions: RenderOptions = {host: this};\n\n  private __childPart: ChildPart | undefined = undefined;\n\n  /**\n   * @category rendering\n   */\n  protected createRenderRoot() {\n    const renderRoot = super.createRenderRoot();\n    // When adoptedStyleSheets are shimmed, they are inserted into the\n    // shadowRoot by createRenderRoot. Adjust the renderBefore node so that\n    // any styles in Lit content render before adoptedStyleSheets. This is\n    // important so that adoptedStyleSheets have precedence over styles in\n    // the shadowRoot.\n    this.renderOptions.renderBefore ??= renderRoot!.firstChild as ChildNode;\n    return renderRoot;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * @param changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected update(changedProperties: PropertyValues) {\n    // Setting properties in `render` should not trigger an update. Since\n    // updates are allowed after super.update, it's important to call `render`\n    // before that.\n    const value = this.render();\n    super.update(changedProperties);\n    this.__childPart = render(value, this.renderRoot, this.renderOptions);\n  }\n\n  // TODO(kschaaf): Consider debouncing directive disconnection so element moves\n  // do not thrash directive callbacks\n  // https://github.com/lit/lit/issues/1457\n  /**\n   * @category lifecycle\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.__childPart?.setConnected(true);\n  }\n\n  /**\n   * @category lifecycle\n   */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.__childPart?.setConnected(false);\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method may return\n   * any value renderable by lit-html's `ChildPart` - typically a\n   * `TemplateResult`. Setting properties inside this method will *not* trigger\n   * the element to update.\n   * @category rendering\n   */\n  protected render(): unknown {\n    return noChange;\n  }\n}\n\n// Install hydration if available\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(globalThis as any)['litElementHydrateSupport']?.({LitElement});\n\n// Apply polyfills if available\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(globalThis as any)['litElementPlatformSupport']?.({LitElement});\n\n// DEV mode warnings\nif (DEV_MODE) {\n  // Note, for compatibility with closure compilation, this access\n  // needs to be as a string property index.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (LitElement as any)['finalize'] = function (this: typeof LitElement) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const finalized = (ReactiveElement as any).finalize.call(this);\n    if (!finalized) {\n      return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const warnRemoved = (obj: any, name: string) => {\n      if (obj[name] !== undefined) {\n        console.warn(\n          `\\`${name}\\` is implemented. It ` +\n            `has been removed from this version of LitElement. `\n          // TODO(sorvell): add link to changelog when location has stabilized.\n          // + See the changelog at https://github.com/lit/lit/blob/main/packages/lit-element/CHANGELOG.md`\n        );\n      }\n    };\n    [`render`, `getStyles`].forEach((name: string) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      warnRemoved(this as any, name)\n    );\n    [`adoptStyles`].forEach((name: string) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      warnRemoved(this.prototype as any, name)\n    );\n    return true;\n  };\n}\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports  mangled in the\n * client side code, we export a _Φ object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-html, since this module re-exports all of lit-html.\n *\n * @private\n */\nexport const _Φ = {\n  _$attributeToProperty: (\n    el: LitElement,\n    name: string,\n    value: string | null\n  ) => {\n    // eslint-disable-next-line\n    (el as any)._$attributeToProperty(name, value);\n  },\n  // eslint-disable-next-line\n  _$changedProperties: (el: LitElement) => (el as any)._$changedProperties,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport {Constructor, ClassDescriptor} from './base.js';\n\nconst legacyCustomElement = (\n  tagName: string,\n  clazz: Constructor<HTMLElement>\n) => {\n  window.customElements.define(tagName, clazz);\n  // Cast as any because TS doesn't recognize the return type as being a\n  // subtype of the decorated class when clazz is typed as\n  // `Constructor<HTMLElement>` for some reason.\n  // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n  // applied to elements however.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return clazz as any;\n};\n\nconst standardCustomElement = (\n  tagName: string,\n  descriptor: ClassDescriptor\n) => {\n  const {kind, elements} = descriptor;\n  return {\n    kind,\n    elements,\n    // This callback is called once the class is otherwise fully defined\n    finisher(clazz: Constructor<HTMLElement>) {\n      window.customElements.define(tagName, clazz);\n    },\n  };\n};\n\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * ```\n * @customElement('my-element')\n * class MyElement extends LitElement {\n *   render() {\n *     return html``;\n *   }\n * }\n * ```\n * @category Decorator\n * @param tagName The tag name of the custom element to define.\n */\nexport const customElement = (tagName: string) => (\n  classOrDescriptor: Constructor<HTMLElement> | ClassDescriptor\n) =>\n  typeof classOrDescriptor === 'function'\n    ? legacyCustomElement(tagName, classOrDescriptor)\n    : standardCustomElement(tagName, classOrDescriptor);\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport {PropertyDeclaration, ReactiveElement} from '../reactive-element.js';\nimport {ClassElement} from './base.js';\n\nconst standardProperty = (\n  options: PropertyDeclaration,\n  element: ClassElement\n) => {\n  // When decorating an accessor, pass it through and add property metadata.\n  // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n  // stomp over the user's accessor.\n  if (\n    element.kind === 'method' &&\n    element.descriptor &&\n    !('value' in element.descriptor)\n  ) {\n    return {\n      ...element,\n      finisher(clazz: typeof ReactiveElement) {\n        clazz.createProperty(element.key, options);\n      },\n    };\n  } else {\n    // createProperty() takes care of defining the property, but we still\n    // must return some kind of descriptor, so return a descriptor for an\n    // unused prototype field. The finisher calls createProperty().\n    return {\n      kind: 'field',\n      key: Symbol(),\n      placement: 'own',\n      descriptor: {},\n      // store the original key so subsequent decorators have access to it.\n      originalKey: element.key,\n      // When @babel/plugin-proposal-decorators implements initializers,\n      // do this instead of the initializer below. See:\n      // https://github.com/babel/babel/issues/9260 extras: [\n      //   {\n      //     kind: 'initializer',\n      //     placement: 'own',\n      //     initializer: descriptor.initializer,\n      //   }\n      // ],\n      initializer(this: {[key: string]: unknown}) {\n        if (typeof element.initializer === 'function') {\n          this[element.key as string] = element.initializer.call(this);\n        }\n      },\n      finisher(clazz: typeof ReactiveElement) {\n        clazz.createProperty(element.key, options);\n      },\n    };\n  }\n};\n\nconst legacyProperty = (\n  options: PropertyDeclaration,\n  proto: Object,\n  name: PropertyKey\n) => {\n  (proto.constructor as typeof ReactiveElement).createProperty(name, options);\n};\n\n/**\n * A property decorator which creates a reactive property that reflects a\n * corresponding attribute value. When a decorated property is set\n * the element will update and render. A [[`PropertyDeclaration`]] may\n * optionally be supplied to configure property features.\n *\n * This decorator should only be used for public fields. As public fields,\n * properties should be considered as primarily settable by element users,\n * either via attribute or the property itself.\n *\n * Generally, properties that are changed by the element should be private or\n * protected fields and should use the [[`state`]] decorator.\n *\n * However, sometimes element code does need to set a public property. This\n * should typically only be done in response to user interaction, and an event\n * should be fired informing the user; for example, a checkbox sets its\n * `checked` property when clicked and fires a `changed` event. Mutating public\n * properties should typically not be done for non-primitive (object or array)\n * properties. In other cases when an element needs to manage state, a private\n * property decorated via the [[`state`]] decorator should be used. When needed,\n * state properties can be initialized via public properties to facilitate\n * complex interactions.\n *\n * @example\n * ```ts\n * class MyElement {\n *   @property({ type: Boolean })\n *   clicked = false;\n * }\n * ```\n * @category Decorator\n * @ExportDecoratedItems\n */\nexport function property(options?: PropertyDeclaration) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (protoOrDescriptor: Object | ClassElement, name?: PropertyKey): any =>\n    name !== undefined\n      ? legacyProperty(options!, protoOrDescriptor as Object, name)\n      : standardProperty(options!, protoOrDescriptor as ClassElement);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {property} from './property.js';\n\nexport interface InternalPropertyDeclaration<Type = unknown> {\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n}\n\n/**\n * Declares a private or protected reactive property that still triggers\n * updates to the element when it changes. It does not reflect from the\n * corresponding attribute.\n *\n * Properties declared this way must not be used from HTML or HTML templating\n * systems, they're solely for properties internal to the element. These\n * properties may be renamed by optimization tools like closure compiler.\n * @category Decorator\n */\nexport function state(options?: InternalPropertyDeclaration) {\n  return property({\n    ...options,\n    state: true,\n    attribute: false,\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ReactiveElement} from '../reactive-element.js';\n\nexport type Constructor<T> = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  new (...args: any[]): T;\n};\n\n// From the TC39 Decorators proposal\nexport interface ClassDescriptor {\n  kind: 'class';\n  elements: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => void | Constructor<T>;\n}\n\n// From the TC39 Decorators proposal\nexport interface ClassElement {\n  kind: 'field' | 'method';\n  key: PropertyKey;\n  placement: 'static' | 'prototype' | 'own';\n  initializer?: Function;\n  extras?: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => void | Constructor<T>;\n  descriptor?: PropertyDescriptor;\n}\n\nexport const legacyPrototypeMethod = (\n  descriptor: PropertyDescriptor,\n  proto: Object,\n  name: PropertyKey\n) => {\n  Object.defineProperty(proto, name, descriptor);\n};\n\nexport const standardPrototypeMethod = (\n  descriptor: PropertyDescriptor,\n  element: ClassElement\n) => ({\n  kind: 'method',\n  placement: 'prototype',\n  key: element.key,\n  descriptor,\n});\n\n/**\n * Helper for decorating a property that is compatible with both TypeScript\n * and Babel decorators. The optional `finisher` can be used to perform work on\n * the class. The optional `descriptor` should return a PropertyDescriptor\n * to install for the given property.\n *\n * @param finisher {function} Optional finisher method; receives the element\n * constructor and property key as arguments and has no return value.\n * @param descriptor {function} Optional descriptor method; receives the\n * property key as an argument and returns a property descriptor to define for\n * the given property.\n * @returns {ClassElement|void}\n */\nexport const decorateProperty = ({\n  finisher,\n  descriptor,\n}: {\n  finisher?:\n    | ((ctor: typeof ReactiveElement, property: PropertyKey) => void)\n    | null;\n  descriptor?: (property: PropertyKey) => PropertyDescriptor;\n}) => (\n  protoOrDescriptor: ReactiveElement | ClassElement,\n  name?: PropertyKey\n  // Note TypeScript requires the return type to be `void|any`\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): void | any => {\n  // TypeScript / Babel legacy mode\n  if (name !== undefined) {\n    const ctor = (protoOrDescriptor as ReactiveElement)\n      .constructor as typeof ReactiveElement;\n    if (descriptor !== undefined) {\n      Object.defineProperty(protoOrDescriptor, name, descriptor(name));\n    }\n    finisher?.(ctor, name!);\n    // Babel standard mode\n  } else {\n    // Note, the @property decorator saves `key` as `originalKey`\n    // so try to use it here.\n    const key =\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (protoOrDescriptor as any).originalKey ??\n      (protoOrDescriptor as ClassElement).key;\n    const info: ClassElement =\n      descriptor != undefined\n        ? {\n            kind: 'method',\n            placement: 'prototype',\n            key,\n            descriptor: descriptor((protoOrDescriptor as ClassElement).key),\n          }\n        : {...(protoOrDescriptor as ClassElement), key};\n    if (finisher != undefined) {\n      info.finisher = function <ReactiveElement>(\n        ctor: Constructor<ReactiveElement>\n      ) {\n        finisher((ctor as unknown) as typeof ReactiveElement, key);\n      };\n    }\n    return info;\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {ReactiveElement} from '../reactive-element.js';\nimport {decorateProperty} from './base.js';\n\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n * @param cache An optional boolean which when true performs the DOM query only\n *     once and caches the result.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n *\n * ```ts\n * class MyElement {\n *   @query('#first')\n *   first;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function query(selector: string, cache?: boolean) {\n  return decorateProperty({\n    descriptor: (name: PropertyKey) => {\n      const descriptor = {\n        get(this: ReactiveElement) {\n          return this.renderRoot?.querySelector(selector);\n        },\n        enumerable: true,\n        configurable: true,\n      };\n      if (cache) {\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        descriptor.get = function (this: ReactiveElement) {\n          if (\n            ((this as unknown) as {[key: string]: Element | null})[\n              key as string\n            ] === undefined\n          ) {\n            ((this as unknown) as {[key: string]: Element | null})[\n              key as string\n            ] = this.renderRoot?.querySelector(selector);\n          }\n          return ((this as unknown) as {[key: string]: Element | null})[\n            key as string\n          ];\n        };\n      }\n      return descriptor;\n    },\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {ReactiveElement} from '../reactive-element.js';\nimport {decorateProperty} from './base.js';\n\n// TODO(sorvell): Remove when https://github.com/webcomponents/polyfills/issues/397 is addressed.\n// x-browser support for matches\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst ElementProto = Element.prototype as any;\nconst legacyMatches =\n  ElementProto.msMatchesSelector || ElementProto.webkitMatchesSelector;\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedNodes` of the given named `slot`. Note, the type of\n * this property should be annotated as `NodeListOf<HTMLElement>`.\n *\n * @param slotName A string name of the slot.\n * @param flatten A boolean which when true flattens the assigned nodes,\n *     meaning any assigned nodes that are slot elements are replaced with their\n *     assigned nodes.\n * @param selector A string which filters the results to elements that match\n *     the given css selector.\n *\n * * @example\n * ```ts\n * class MyElement {\n *   @queryAssignedNodes('list', true, '.item')\n *   listItems;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function queryAssignedNodes(\n  slotName = '',\n  flatten = false,\n  selector = ''\n) {\n  return decorateProperty({\n    descriptor: (_name: PropertyKey) => ({\n      get(this: ReactiveElement) {\n        const slotSelector = `slot${\n          slotName ? `[name=${slotName}]` : ':not([name])'\n        }`;\n        const slot = this.renderRoot?.querySelector(slotSelector);\n        let nodes = (slot as HTMLSlotElement)?.assignedNodes({flatten});\n        if (nodes && selector) {\n          nodes = nodes.filter(\n            (node) =>\n              node.nodeType === Node.ELEMENT_NODE &&\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              ((node as any).matches\n                ? (node as Element).matches(selector)\n                : legacyMatches.call(node as Element, selector))\n          );\n        }\n        return nodes;\n      },\n      enumerable: true,\n      configurable: true,\n    }),\n  });\n}\n","export type Tea =\n  | null\n  | string\n  | number\n  | undefined\n  | boolean\n  | symbol\n  | Date\n  | any[]\n  | object\n  | Map<any, any>\n  | Set<any>;\n\ntype Handler<T extends Tea> = (tea: T, context: Context) => void;\nexport interface Server {\n  (): boolean;\n  listening: boolean;\n}\n\ntype Order<T extends Tea> = ((tea: T) => T | Promise<T>) | T;\n\nexport interface Cup<T extends Tea> {\n  (): T;\n  (order: Order<T>, context?: Context): Promise<T>;\n  on: (fn: Handler<T>) => Server;\n  clear: () => void;\n}\n\nexport type Context = WeakSet<Cup<any>>;\n\nexport function orderCup<T extends Tea>(\n  firstTea: T,\n  flavoring: (tea: T) => T = t => t,\n): Cup<T> {\n  let handlers = new Set<Handler<T>>();\n  let flavoredTea = flavoring(firstTea);\n\n  let isPreviousCancelled = { cancelled: false };\n\n  const setTea = (teaRefill: T, context: Context) => {\n    const flavoredTeaRefill = flavoring(teaRefill);\n    if (\n      flavoredTea === flavoredTeaRefill ||\n      (Number.isNaN(flavoredTea as any) &&\n        Number.isNaN(flavoredTeaRefill as any))\n    ) {\n      return;\n    }\n    isPreviousCancelled.cancelled = true;\n    const isCancelled = { cancelled: false };\n    isPreviousCancelled = isCancelled;\n    flavoredTea = flavoredTeaRefill;\n    handlers.forEach(handler => {\n      if (isCancelled.cancelled) {\n        return;\n      }\n      handler(flavoredTea, context);\n    });\n  };\n\n  function cup(): T;\n  function cup(order: Order<T>, context?: Context): Promise<T>;\n  function cup(order?: Order<T>, context: Context = new WeakSet()) {\n    if (arguments.length === 0) {\n      return flavoredTea;\n    }\n    return Promise.resolve(\n      typeof order === 'function' ? order(flavoredTea) : order,\n    ).then(teaRefill => {\n      if (context.has(cup)) {\n        return flavoredTea;\n      }\n      context.add(cup);\n      setTea(teaRefill, context);\n      return flavoredTea;\n    });\n  }\n\n  cup.on = (fn: Handler<T>) => {\n    handlers.add(fn);\n    const server = () => handlers.delete(fn);\n    Object.defineProperty(server, 'listening', {\n      get: () => handlers.has(fn),\n    });\n    return server as Server;\n  };\n\n  cup.clear = () => handlers.clear();\n\n  return cup;\n}\n","import { orderCup } from \"manatea\";\nimport { lch, lab, rgb, hsl, } from \"d3-color\";\nconst initialLCHColor = lch(57, 110, 283.8);\nconst initialLabColor = lab(initialLCHColor);\nconst initialRGBColor = rgb(initialLCHColor.formatHex());\nconst initialHSLColor = hsl(initialLCHColor.formatHex());\nexport const lchCup = orderCup(initialLCHColor, (tea) => {\n    tea.l = clamp(0, tea.l, 100);\n    tea.c = clamp(0, tea.c, 132);\n    tea.h = clamp(0, tea.h, 360);\n    return tea;\n});\nexport const labCup = orderCup(initialLabColor, (tea) => {\n    tea.l = clamp(0, tea.l, 100);\n    tea.a = clamp(-128, tea.a, 127);\n    tea.b = clamp(-128, tea.b, 127);\n    return tea;\n});\nexport const rgbCup = orderCup(initialRGBColor, (tea) => {\n    tea.r = clamp(0, tea.r, 255);\n    tea.g = clamp(0, tea.g, 255);\n    tea.b = clamp(0, tea.b, 255);\n    return tea;\n});\nexport const hslCup = orderCup(initialHSLColor, (tea) => {\n    tea.h = clamp(0, tea.h, 360);\n    tea.s = clamp(0, tea.s, 1);\n    tea.l = clamp(0, tea.l, 1);\n    return tea;\n});\nexport const luminanceCup = orderCup(initialLCHColor.l, (tea) => \n// 0 -> 100\nclamp(0, tea, 100));\nexport const chromaCup = orderCup(initialLCHColor.c, (tea) => \n// 0 -> 132\nclamp(0, tea, 132));\nexport const hueCup = orderCup(initialLCHColor.h, (tea) => \n// 0 -> 360\nclamp(0, tea, 360));\nexport const aCup = orderCup(initialLabColor.a, (tea) => \n// -128 -> 127\nclamp(-128, tea, 127));\nexport const bCup = orderCup(initialLabColor.b, (tea) => \n// -128 -> 127\nclamp(-128, tea, 127));\nexport const redCup = orderCup(initialRGBColor.r, (tea) => \n// 0 -> 255\nclamp(0, tea, 255));\nexport const greenCup = orderCup(initialRGBColor.g, (tea) => \n// 0 -> 255\nclamp(0, tea, 255));\nexport const blueCup = orderCup(initialRGBColor.b, (tea) => \n// 0 -> 255\nclamp(0, tea, 255));\nexport const fakeHueCup = orderCup(initialHSLColor.h, (tea) => \n// 0 -> 360\nclamp(0, tea, 360));\nexport const saturationCup = orderCup(initialHSLColor.s, (tea) => \n// 0 -> 1\nclamp(0, tea, 1));\nexport const lightnessCup = orderCup(initialHSLColor.l, (tea) => \n// 0 -> 1\nclamp(0, tea, 1));\nlchCup.on((newLch, context) => {\n    luminanceCup(newLch.l, context);\n    chromaCup(newLch.c, context);\n    hueCup(newLch.h, context);\n    labCup((prevLab) => genLab(prevLab, newLch), context);\n    rgbCup((prevRGB) => genRGB(prevRGB, newLch), context);\n    hslCup((prevHSL) => genHSL(prevHSL, newLch), context);\n});\nlabCup.on((newLab, context) => {\n    luminanceCup(newLab.l, context);\n    aCup(newLab.a, context);\n    bCup(newLab.b, context);\n    lchCup((prevLCH) => genLCH(prevLCH, newLab), context);\n    rgbCup((prevRGB) => genRGB(prevRGB, newLab), context);\n    hslCup((prevHSL) => genHSL(prevHSL, newLab), context);\n});\nrgbCup.on((newRGB, context) => {\n    redCup(newRGB.r, context);\n    blueCup(newRGB.b, context);\n    greenCup(newRGB.g, context);\n    lchCup((prevLCH) => genLCH(prevLCH, newRGB), context);\n    labCup((prevLab) => genLab(prevLab, newRGB), context);\n    hslCup((prevHSL) => genHSL(prevHSL, newRGB), context);\n});\nhslCup.on((newHSL, context) => {\n    fakeHueCup(newHSL.h, context);\n    saturationCup(newHSL.s, context);\n    lightnessCup(newHSL.l, context);\n    lchCup((prevLCH) => genLCH(prevLCH, newHSL), context);\n    labCup((prevLab) => genLab(prevLab, newHSL), context);\n    rgbCup((prevRGB) => genRGB(prevRGB, newHSL), context);\n});\nluminanceCup.on((newLuminance, context) => {\n    lchCup((prevLCH) => {\n        const newLCH = prevLCH.copy();\n        newLCH.l = newLuminance;\n        return newLCH;\n    }, context);\n    labCup((prevLab) => {\n        const newLab = prevLab.copy();\n        newLab.l = newLuminance;\n        return newLab;\n    }, context);\n});\nchromaCup.on((newChroma, context) => {\n    lchCup((prevLCH) => {\n        const newLCH = prevLCH.copy();\n        newLCH.c = newChroma;\n        return newLCH;\n    }, context);\n});\nhueCup.on((newHue, context) => {\n    lchCup((prevLCH) => {\n        const newLCH = prevLCH.copy();\n        newLCH.h = newHue;\n        return newLCH;\n    }, context);\n});\naCup.on((newA, context) => {\n    labCup((prevLab) => {\n        const newLab = prevLab.copy();\n        newLab.a = newA;\n        return newLab;\n    }, context);\n});\nbCup.on((newB, context) => {\n    labCup((prevLab) => {\n        const newLab = prevLab.copy();\n        newLab.b = newB;\n        return newLab;\n    }, context);\n});\nredCup.on((newRed, context) => {\n    rgbCup((prevRGB) => {\n        const newRGB = prevRGB.copy();\n        newRGB.r = newRed;\n        return newRGB;\n    }, context);\n});\ngreenCup.on((newGreen, context) => {\n    rgbCup((prevRGB) => {\n        const newRGB = prevRGB.copy();\n        newRGB.g = newGreen;\n        return newRGB;\n    }, context);\n});\nblueCup.on((newBlue, context) => {\n    rgbCup((prevRGB) => {\n        const newRGB = prevRGB.copy();\n        newRGB.b = newBlue;\n        return newRGB;\n    }, context);\n});\nfakeHueCup.on((newHue, context) => {\n    hslCup((prevHSL) => {\n        const newHSL = prevHSL.copy();\n        newHSL.h = newHue;\n        return newHSL;\n    }, context);\n});\nsaturationCup.on((newSaturation, context) => {\n    hslCup((prevHSL) => {\n        const newHSL = prevHSL.copy();\n        newHSL.s = newSaturation;\n        return newHSL;\n    }, context);\n});\nlightnessCup.on((newLightness, context) => {\n    hslCup((prevHSL) => {\n        const newHSL = prevHSL.copy();\n        newHSL.l = newLightness;\n        return newHSL;\n    }, context);\n});\nfunction clamp(min, number, max) {\n    return Math.min(max, Math.max(min, number || 0));\n}\nfunction genLCH(previousLCH, newColor) {\n    const newLCH = lch(newColor);\n    if (newLCH.l !== previousLCH.l ||\n        newLCH.c !== previousLCH.c ||\n        newLCH.h !== previousLCH.h) {\n        return newLCH;\n    }\n    return previousLCH;\n}\nfunction genLab(previousLab, newColor) {\n    const newLab = lab(newColor);\n    if (newLab.l !== previousLab.l ||\n        newLab.a !== previousLab.a ||\n        newLab.b !== previousLab.b) {\n        return newLab;\n    }\n    return previousLab;\n}\nfunction genRGB(previousRGB, newColor) {\n    const newRGB = rgb(newColor.formatHex());\n    if (newRGB.r !== previousRGB.r ||\n        newRGB.g !== previousRGB.g ||\n        newRGB.b !== previousRGB.b) {\n        return newRGB;\n    }\n    return previousRGB;\n}\nfunction genHSL(previousHSL, newColor) {\n    const newHSL = hsl(newColor.formatHex());\n    if (newHSL.h !== previousHSL.h ||\n        newHSL.s !== previousHSL.s ||\n        newHSL.l !== previousHSL.l) {\n        return newHSL;\n    }\n    return previousHSL;\n}\n","module.exports = require('./get-worker-url')(\"generate-colors.worker.0bf242fc.js\", true);","\"use strict\";\n\n/* global self, Blob */\nvar bundleUrl = require('./bundle-url');\n\nmodule.exports = function (relativePath, isESM) {\n  var workerUrl = bundleUrl.getBundleURL() + relativePath;\n\n  if (bundleUrl.getOrigin(workerUrl) === self.location.origin) {\n    // If the worker bundle's url is on the same origin as the document,\n    // use the worker bundle's own url.\n    return workerUrl;\n  } else {\n    // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.\n    let source = isESM ? 'import ' + JSON.stringify(workerUrl) + ';' : 'importScripts(' + JSON.stringify(workerUrl) + ');';\n    return URL.createObjectURL(new Blob([source], {\n      type: 'application/javascript'\n    }));\n  }\n};","\"use strict\";\n\n/* globals document:readonly */\nvar bundleURL = null;\n\nfunction getBundleURLCached() {\n  if (!bundleURL) {\n    bundleURL = getBundleURL();\n  }\n\n  return bundleURL;\n}\n\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp):\\/\\/[^)\\n]+/g);\n\n    if (matches) {\n      return getBaseURL(matches[0]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\n\n\nfunction getOrigin(url) {\n  let matches = ('' + url).match(/(https?|file|ftp):\\/\\/[^/]+/);\n\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n\n  return matches[0];\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","const getGenerateColorsWorker = () => new Worker(new URL(\"./generate-colors.worker\", import.meta.url), {\n    type: \"module\",\n});\nexport const createGenerateColors = () => {\n    let prevWorker;\n    return (hue, width, height) => {\n        const worker = getGenerateColorsWorker();\n        if (prevWorker) {\n            prevWorker.terminate();\n        }\n        prevWorker = worker;\n        return new Promise((res) => {\n            worker.onmessage = (event) => {\n                res(event.data.slice());\n            };\n            worker.postMessage([hue, width, height]);\n        });\n    };\n};\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, css } from \"lit\";\nimport { customElement, property, eventOptions } from \"lit/decorators.js\";\nimport { query } from \"lit/decorators/query.js\";\nimport { lch } from \"d3-color\";\nimport { lchCup, hueCup } from \"../color-controllers\";\nimport { createGenerateColors } from \"./generate-colors\";\nlet LCHPaint = class LCHPaint extends LitElement {\n    constructor() {\n        super();\n        this.width = 500;\n        this.height = 300;\n        this.isPressed = false;\n        this.generateColors = createGenerateColors();\n        this.updateMarkerPosition = () => {\n            const marker = this.marker;\n            const canvas = this.canvas;\n            if (!marker || !canvas) {\n                return;\n            }\n            const rect = canvas.getBoundingClientRect();\n            const x = Math.floor((lchCup().c / 132) * rect.width);\n            const y = Math.floor((1 - lchCup().l / 100) * rect.height);\n            marker.style.cssText = `transform: translate(calc(${x}px - 50%), calc(${y}px - 50%))`;\n        };\n        this.updateCanvasColors = () => {\n            const canvas = this.canvas;\n            if (!canvas) {\n                return;\n            }\n            const ctx = canvas.getContext(\"2d\");\n            if (!ctx) {\n                return;\n            }\n            this.generateColors(lchCup().h, this.width, this.height).then((colorArray) => {\n                const imageData = new ImageData(colorArray, this.width, this.height);\n                ctx.putImageData(imageData, 0, 0);\n            });\n        };\n        hueCup.on(() => this.updateCanvasColors());\n        lchCup.on(() => this.updateMarkerPosition());\n    }\n    onPositionChange(event) {\n        const canvas = this.canvas;\n        if (!canvas || !this.isPressed) {\n            return;\n        }\n        const rect = canvas.getBoundingClientRect();\n        const x = Math.min(Math.max(event.clientX - rect.x, 0), rect.width);\n        const y = Math.min(Math.max(event.clientY - rect.y, 0), rect.height);\n        const newColor = lch(Math.floor((1 - y / rect.height) * 100), Math.floor((x / rect.width) * 132), lchCup().h);\n        lchCup(newColor);\n    }\n    firstUpdated() {\n        this.updateMarkerPosition();\n    }\n    updated(changed) {\n        if (changed.has(\"width\") || changed.has(\"height\")) {\n            this.updateCanvasColors();\n        }\n    }\n    render() {\n        return html `\n      <div class=\"wrapper\">\n        <canvas\n          @pointerdown=${(event) => {\n            // If we were pressing on the canvas and the mouse moved out of the canvas, it’ll keep the canvas focused\n            event.currentTarget.setPointerCapture(event.pointerId);\n            this.isPressed = true;\n            this.onPositionChange(event);\n        }}\n          @pointermove=${this.onPositionChange}\n          @pointerup=${(event) => {\n            // On pointer up, we can release the pointer\n            event.currentTarget.releasePointerCapture(event.pointerId);\n            this.isPressed = false;\n        }}\n          width=\"${this.width}px\"\n          height=\"${this.height}px\"\n        ></canvas>\n        <div class=\"marker\"></div>\n      </div>\n    `;\n    }\n};\nLCHPaint.styles = css `\n    :host canvas {\n      border-radius: 5px;\n      border: 1px solid grey;\n      max-width: calc(100vw - 4em);\n      /* Avoid making the page scroll on mobile when we are pressing on it */\n      touch-action: none;\n    }\n\n    :host .wrapper {\n      position: relative;\n    }\n\n    :host .marker {\n      position: absolute;\n      top: 0px;\n      left: 0px;\n      pointer-events: none;\n      width: 6px;\n      height: 6px;\n      border-radius: 50%;\n      border: 1px solid var(--contrast);\n      z-index: 1;\n    }\n  `;\n__decorate([\n    property({ type: Number })\n], LCHPaint.prototype, \"width\", void 0);\n__decorate([\n    property({ type: Number })\n], LCHPaint.prototype, \"height\", void 0);\n__decorate([\n    query(\"canvas\")\n], LCHPaint.prototype, \"canvas\", void 0);\n__decorate([\n    query(\".marker\")\n], LCHPaint.prototype, \"marker\", void 0);\n__decorate([\n    eventOptions({ passive: true })\n], LCHPaint.prototype, \"onPositionChange\", null);\nLCHPaint = __decorate([\n    customElement(\"lch-paint\")\n], LCHPaint);\nexport { LCHPaint };\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {ReactiveElement} from '../reactive-element.js';\nimport {decorateProperty} from './base.js';\n\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifies event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n * ```ts\n * class MyElement {\n *   clicked = false;\n *\n *   render() {\n *     return html`\n *       <div @click=${this._onClick}`>\n *         <button></button>\n *       </div>\n *     `;\n *   }\n *\n *   @eventOptions({capture: true})\n *   _onClick(e) {\n *     this.clicked = true;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function eventOptions(options: AddEventListenerOptions) {\n  return decorateProperty({\n    finisher: (ctor: typeof ReactiveElement, name: PropertyKey) => {\n      Object.assign(ctor.prototype[name as keyof ReactiveElement], options);\n    },\n  });\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, css } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators.js\";\nimport { rgb } from \"d3-color\";\nconst height = 20;\nconst offset = 1;\nconst borderWidth = 1;\nconst borderColor = css `var(--contrast)`;\nconst thumbWidth = 14;\nconst thumbStyles = css `\n  width: ${thumbWidth}px;\n  height: ${height + offset * 2}px;\n  background: #00000000;\n  box-shadow: 0 0 0 ${borderWidth}px var(--black),\n    inset 0 0 0 ${borderWidth}px var(--white);\n  border-radius: 3px;\n  cursor: pointer;\n`;\nconst trackBackground = css `var(--track-background, #9e9e9e)`;\nconst trackBackgroundHover = css `var(--track-background-hover, #bbbbbb)`;\nconst trackBackgroundFocus = css `var(--track-background-focus, #cbcbcb)`;\nconst trackStyles = css `\n  background: ${trackBackground};\n  background-size: 100% 100%;\n  background-repeat: no-repeat;\n  box-shadow: 0 0 0 ${borderWidth}px ${borderColor};\n  border-radius: 3px;\n  width: 100%;\n  height: ${height}px;\n  cursor: pointer;\n`;\nlet ColorSlider = class ColorSlider extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.min = 0;\n        this.max = 100;\n        this.step = 1;\n        this.referenceColor = rgb(0, 0, 0);\n        this.valueToModify = \"h\";\n        this.getBackgroundRange = () => {\n            clearTimeout(this.throttleId);\n            const color = this.referenceColor.copy();\n            const colorToCompare = { ...color };\n            delete colorToCompare[this.valueToModify];\n            const stringColorToCompare = JSON.stringify(colorToCompare);\n            if (this.prevBackgroundRange) {\n                // If the color hasn't changed, no need to re-compute\n                if (this.prevColor === stringColorToCompare) {\n                    return this.prevBackgroundRange;\n                }\n                const now = performance.now();\n                // Only compute every 100ms\n                if (this.timePrevOp != null && now - this.timePrevOp < 100) {\n                    // Start a timeout of 100ms so that if the last update was cancelled, we'll still have a correct render\n                    this.throttleId = window.setTimeout(() => this.requestUpdate(), 100);\n                    return this.prevBackgroundRange;\n                }\n            }\n            const nbOfPoints = Math.round((this.max - this.min) / this.step);\n            const colorArray = new Uint8ClampedArray(nbOfPoints * 4);\n            for (let i = 0; i <= nbOfPoints; i++) {\n                // @ts-ignore\n                color[this.valueToModify] = i * this.step;\n                const rgb = color.rgb();\n                const position = 4 * i;\n                colorArray[position + 0] = rgb.r; // R value\n                colorArray[position + 1] = rgb.g; // G value\n                colorArray[position + 2] = rgb.b; // B value\n                colorArray[position + 3] = 255; // A value\n            }\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = nbOfPoints;\n            canvas.height = 1;\n            const imageData = new ImageData(colorArray, nbOfPoints, 1);\n            const ctx = canvas.getContext(\"2d\", { alpha: false });\n            ctx.putImageData(imageData, 0, 0);\n            const dataUrl = canvas.toDataURL();\n            this.prevBackgroundRange = dataUrl;\n            this.prevColor = stringColorToCompare;\n            this.timePrevOp = performance.now();\n            return dataUrl;\n        };\n    }\n    render() {\n        return html `<input\n      .min=${this.min}\n      .max=${this.max}\n      .step=${this.step}\n      .value=${this.value}\n      style=\"--track-background: url(${this.getBackgroundRange()})\"\n      type=\"range\"\n      @input=${(event) => {\n            const element = event.target;\n            const v = Number(element.value);\n            this.value = Number.isNaN(v) ? undefined : v;\n        }}\n    />`;\n    }\n};\nColorSlider.styles = css `\n    :host input[type=\"range\"] {\n      width: 100%;\n      margin: 0.5px 0;\n      background-color: transparent;\n      -webkit-appearance: none;\n    }\n\n    :host input[type=\"range\"]::-webkit-slider-runnable-track {\n      ${trackStyles}\n    }\n    :host input[type=\"range\"]::-moz-range-track {\n      ${trackStyles}\n    }\n\n    :host input[type=\"range\"]::-moz-range-thumb {\n      ${thumbStyles}\n    }\n    :host input[type=\"range\"]::-webkit-slider-thumb {\n      ${thumbStyles}\n      margin-top: -${offset}px;\n      -webkit-appearance: none;\n    }\n\n    :host input[type=\"range\"]:focus {\n      outline: none;\n    }\n\n    :host input[type=\"range\"]:hover::-moz-range-thumb {\n      background: #00000044;\n    }\n    :host input[type=\"range\"]:hover::-webkit-slider-thumb {\n      background: #00000044;\n    }\n    :host input[type=\"range\"]:focus-visible::-moz-range-thumb {\n      outline: -moz-mac-focusring auto 1px;\n      outline-offset: 1px;\n    }\n    :host input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n      outline: -webkit-focus-ring-color auto 1px;\n      outline-offset: 1px;\n    }\n  `;\n__decorate([\n    property({ type: Number, reflect: true })\n], ColorSlider.prototype, \"min\", void 0);\n__decorate([\n    property({ type: Number, reflect: true })\n], ColorSlider.prototype, \"max\", void 0);\n__decorate([\n    property({ type: Number, reflect: true })\n], ColorSlider.prototype, \"step\", void 0);\n__decorate([\n    property({ type: Number, reflect: true })\n], ColorSlider.prototype, \"value\", void 0);\n__decorate([\n    state()\n], ColorSlider.prototype, \"referenceColor\", void 0);\n__decorate([\n    state()\n], ColorSlider.prototype, \"valueToModify\", void 0);\nColorSlider = __decorate([\n    customElement(\"color-slider\")\n], ColorSlider);\nexport { ColorSlider };\n","export class ManateaController {\n    constructor(host, cup) {\n        this.host = host;\n        host.addController(this);\n        this.cup = cup;\n        // Update base component\n        this.listener = cup.on(() => this.host.requestUpdate());\n    }\n    hostDisconnected() {\n        // disconnect listener\n        this.listener();\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, css } from \"lit\";\nimport { customElement, state } from \"lit/decorators.js\";\nimport \"./ColorSlider\";\nimport { aCup, bCup, blueCup, chromaCup, fakeHueCup, greenCup, hslCup, hueCup, labCup, lchCup, lightnessCup, luminanceCup, redCup, rgbCup, saturationCup, } from \"../color-controllers\";\nimport { ManateaController } from \"../manatea-controller\";\nfunction toHex(color) {\n    return Math.floor(color).toString(16).padStart(2, \"0\");\n}\nfunction toFixed(number, decimal = 2) {\n    const dec = 10 ** decimal;\n    return Math.round(number * dec) / dec;\n}\nconst view = window.matchMedia(\"(max-width: 595px)\");\nlet ColorPicker = class ColorPicker extends LitElement {\n    constructor() {\n        super();\n        // To auto update when the color changes\n        this.lchController = new ManateaController(this, lchCup);\n        this.isMobile = view.matches;\n        this.viewListener = (mqle) => {\n            this.isMobile = mqle.matches;\n        };\n        view.addListener(this.viewListener);\n    }\n    disconnectedCallback() {\n        view.removeListener(this.viewListener);\n    }\n    renderInput({ label, shortName = label[0].toUpperCase(), id = label[0], cup, min, max, step = 1, mod = (v) => v, unit = \"\", referenceColor, }) {\n        const clamp = (n) => Math.min(max, Math.max(min, n));\n        return html `\n      <label for=\"lab-${id}\">${shortName} (${label})</label>\n      <color-slider\n        .id=\"lab-${id}\"\n        .min=${min}\n        .max=${max}\n        .step=${step}\n        .value=${cup()}\n        .referenceColor=${referenceColor}\n        .valueToModify=${label[0]}\n        @input=${(event) => {\n            const element = event.target;\n            const value = clamp(element.value || 0);\n            element.value = value;\n            cup(value);\n        }}\n      ></color-slider>\n      <span\n        >${toFixed(mod(cup()), Math.floor(-Math.log(step) / Math.log(10)))}${unit}</span\n      >\n    `;\n    }\n    willUpdate(changed) {\n        const keys = new Set(changed.keys());\n        keys.delete(\"luminance\");\n        keys.delete(\"chroma\");\n        keys.delete(\"hue\");\n        // Only update if the update was related to LCH, otherwise no\n        if (keys.size === 0) {\n            lchCup();\n        }\n    }\n    render() {\n        const hexRGB = `#${toHex(redCup())}${toHex(greenCup())}${toHex(blueCup())}`;\n        return html `\n      <div class=\"wrapper\">\n        <details open>\n          <summary><h2>LCH</h2></summary>\n          <div class=\"group\">\n            ${this.renderInput({\n            label: \"luminance\",\n            cup: luminanceCup,\n            min: 0,\n            max: 100,\n            unit: \"º\",\n            referenceColor: lchCup(),\n        })}\n            ${this.renderInput({\n            label: \"chroma\",\n            cup: chromaCup,\n            min: 0,\n            max: 132,\n            referenceColor: lchCup(),\n        })}\n            ${this.renderInput({\n            label: \"hue\",\n            cup: hueCup,\n            min: 0,\n            max: 360,\n            referenceColor: lchCup(),\n        })}\n\n            <pre class=\"code-wrapper\"><code class=\"code\">LCH(${toFixed(luminanceCup())}% ${toFixed(chromaCup())} ${toFixed(hueCup())})</code></pre>\n          </div>\n        </details>\n\n        <details ?open=${!this.isMobile}>\n          <summary><h2>Lab</h2></summary>\n          <div class=\"group\">\n            ${this.renderInput({\n            label: \"luminance\",\n            cup: luminanceCup,\n            min: 0,\n            max: 100,\n            unit: \"º\",\n            id: \"L2\",\n            referenceColor: labCup(),\n        })}\n            ${this.renderInput({\n            label: \"a\",\n            shortName: \"a\",\n            cup: aCup,\n            min: -128,\n            max: 127,\n            referenceColor: labCup(),\n        })}\n            ${this.renderInput({\n            label: \"b\",\n            shortName: \"b\",\n            cup: bCup,\n            min: -128,\n            max: 127,\n            referenceColor: labCup(),\n        })}\n\n            <pre class=\"code-wrapper\"><code class='code'>Lab(${toFixed(luminanceCup())}% ${toFixed(aCup())} ${toFixed(bCup())})</code></pre>\n          </div>\n        </details>\n\n        <details ?open=${!this.isMobile}>\n          <summary><h2>RGB</h2></summary>\n          <div class=\"group\">\n            ${this.renderInput({\n            label: \"red\",\n            cup: redCup,\n            min: 0,\n            max: 255,\n            referenceColor: rgbCup(),\n        })}\n            ${this.renderInput({\n            label: \"green\",\n            cup: greenCup,\n            min: 0,\n            max: 255,\n            referenceColor: rgbCup(),\n        })}\n            ${this.renderInput({\n            label: \"blue\",\n            cup: blueCup,\n            min: 0,\n            max: 255,\n            referenceColor: rgbCup(),\n        })}\n\n            <pre class=\"code-wrapper\"><code class='code'>rgb(${toFixed(redCup())} ${toFixed(greenCup())} ${toFixed(blueCup())})</code>\n<code class='code'>${hexRGB}</code></pre>\n          </div>\n        </details>\n\n        <details ?open=${!this.isMobile}>\n          <summary><h2>HSL</h2></summary>\n          <div class=\"group\">\n            ${this.renderInput({\n            label: \"hue\",\n            cup: fakeHueCup,\n            min: 0,\n            max: 360,\n            referenceColor: hslCup(),\n        })}\n            ${this.renderInput({\n            label: \"saturation\",\n            cup: saturationCup,\n            min: 0,\n            step: 0.01,\n            max: 1,\n            mod: (v) => v * 100,\n            unit: \"%\",\n            referenceColor: hslCup(),\n        })}\n            ${this.renderInput({\n            label: \"lightness\",\n            cup: lightnessCup,\n            min: 0,\n            step: 0.01,\n            max: 1,\n            mod: (v) => v * 100,\n            unit: \"%\",\n            referenceColor: hslCup(),\n        })}\n            <pre class=\"code-wrapper\"><code class='code'>hsl(${toFixed(fakeHueCup())} ${toFixed(saturationCup()) * 100}% ${toFixed(lightnessCup() * 100)}%)</code></pre>\n          </div>\n        </details>\n      </div>\n    `;\n    }\n};\nColorPicker.styles = css `\n    :host label {\n      display: block;\n    }\n\n    :host .wrapper {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      row-gap: 1em;\n      column-gap: 2em;\n      margin-bottom: 1em;\n    }\n    @media (max-width: 595px) {\n      :host .wrapper {\n        grid-template-columns: 1fr;\n      }\n    }\n\n    :host .group {\n      display: grid;\n      grid-template-columns: 1fr 5ch;\n      grid-template-rows: repeat(6, auto) 1fr;\n      column-gap: 1em;\n      row-gap: 0.5em;\n\n      margin-top: 1em;\n    }\n\n    :host h2 {\n      display: inline-block;\n      margin: 0;\n    }\n\n    :host label {\n      grid-column: span 2;\n    }\n\n    :host color-slider {\n      /* Avoid making the page scroll on mobile when we are pressing on it */\n      touch-action: none;\n    }\n\n    :host .code-wrapper {\n      grid-column: span 2;\n    }\n    :host .code {\n      font-family: \"Fira Code\", monospace;\n    }\n  `;\n__decorate([\n    state()\n], ColorPicker.prototype, \"isMobile\", void 0);\nColorPicker = __decorate([\n    customElement(\"color-picker\")\n], ColorPicker);\nexport { ColorPicker };\n","import \"./LCHPaint/LCHPaint\";\nimport \"./ColorPicker/ColorPicker\";\nimport { rgbCup } from \"./color-controllers\";\ndocument.documentElement.style.backgroundColor = rgbCup().formatHex();\nrgbCup.on((tea) => {\n    document.documentElement.style.backgroundColor = tea.formatHex();\n});\n"],"names":["supportsAdoptingStyleSheets","window","ShadowRoot","ShadyCSS","nativeShadow","Document","prototype","CSSStyleSheet","constructionToken","Symbol","CSSResult","cssText","safeToken","Error","undefined","_styleSheet","replaceSync","[object Object]","cssResultCache","Map","getCSSResult","result","get","set","css","strings","values","length","reduce","acc","v","idx","value","getCompatibleStyle","s","sheet","rule","cssRules","unsafeCSS","defaultConverter","type","Boolean","Object","Array","JSON","stringify","fromValue","Number","parse","e","notEqual","old","defaultPropertyDeclaration","attribute","String","converter","reflect","hasChanged","ReactiveElement","HTMLElement","super","this","initializer","_initializers","push","observedAttributes","finalize","t","elementProperties","forEach","p","attr","attributes","i","options","state","noAccessor","hasOwnProperty","key","getPropertyDescriptor","defineProperty","oldValue","name","requestUpdate","configurable","enumerable","finalized","superCtor","getPrototypeOf","Πm","props","properties","getOwnPropertyNames","getOwnPropertySymbols","t1","createProperty","elementStyles","finalizeStyles","styles","isArray","Set","flat","Infinity","reverse","unshift","$005544cd98856a8e$export$11c8b4445f98b986","toLowerCase","__updatePromise","Promise","enableUpdating","__saveInstanceProperties","constructor","controller","__controllers","ΠU","renderRoot","isConnected","hostConnected","splice","indexOf","shadowRoot","attachShadow","shadowRootOptions","adoptedStyleSheets","map","styleSheet","style","document","createElement","textContent","appendChild","adoptStyles","createRenderRoot","c","__enableConnection","hostDisconnected","call","r","__attributeNameForProperty","Πp","attrValue","toAttribute","removeAttribute","propName","ctor","__reflectingProperty","getPropertyOptions","fromAttribute","n","_$changedProperties","__reflectingProperties","isUpdatePending","shouldRequestUpdate","__pendingConnectionPromise","performUpdate","reject","hasUpdated","__instanceProperties","shouldUpdate","changedProperties","willUpdate","hostUpdate","__markUpdated","_$didUpdate","_changedProperties","hostUpdated","i3","firstUpdated","updated","updateComplete","getUpdateComplete","k","__propertyToAttribute","Π$","$06a588150dccea20$export$b30baf7b91992075","globalThis","mode","$06a588150dccea20$var$e","$06a588150dccea20$var$s","$06a588150dccea20$var$h","$06a588150dccea20$var$r","reactiveElementVersions","trustedTypes","policy","createPolicy","createHTML","marker","Math","random","slice","markerMatch","nodeMarker","d","createMarker","createComment","isPrimitive","isIterable","iterator","textEndRegex","commentEndRegex","comment2EndRegex","tagEndRegex","singleQuoteAttrEndRegex","doubleQuoteAttrEndRegex","rawTextElement","tag","_$litType$","html","noChange","for","nothing","templateCache","WeakMap","walker","createTreeWalker","getTemplateHtml","l","attrNames","rawTextEndRegex","regex","attrName","match","attrNameEndIndex","lastIndex","exec","test","RegExp","end","startsWith","htmlResult","Template","node","nodeIndex","attrNameIndex","partCount","parts","el","currentNode","content","svgElement","firstChild","remove","append","childNodes","nextNode","nodeType","hasAttributes","attrsToRemove","getAttributeNames","endsWith","realName","statics","getAttribute","split","m","index","PropertyPart","BooleanAttributePart","EventPart","AttributePart","tagName","emptyScript","data","_options","innerHTML","resolveDirective","part","parent","attributeIndex","currentDirective","__directives","__directive","_$litDirective$","nextDirectiveConstructor","_$setDirectiveConnected","r1","_$initialize","e1","_$resolve","i2","fragment","creationScope","importNode","s1","o","partIndex","templatePart","i4","ChildPart","nextSibling","ElementPart","_parts","_$setValue","_$setChildPartConnected","parentNode","endNode","directiveParent","$8fa3337b08564c44$export$9f457b66e101538f","ref","B","insertBefore","i6","previousSibling","createTextNode","template","e2","_$committedValue","_$template","t4","TemplateInstance","_clone","i7","R","H","itemPart","s2","itemParts","item","_$endNode","start","from","element","s3","fill","change","l1","e4","h","o1","noCommit","setAttribute","newListener","s5","$8fa3337b08564c44$export$1b4c200bb93d5534","oldListener","capture","once","passive","shouldRemoveListener","removeEventListener","shouldAddListener","addEventListener","event","i8","s6","host","handleEvent","litHtmlPlatformSupport","$8fa3337b08564c44$var$i","litHtmlVersions","$8fa3337b08564c44$var$s","$8fa3337b08564c44$var$e","litElementVersions","$c7e9643701b79b9e$var$i","$c7e9643701b79b9e$var$a","LitElement","renderOptions","renderBefore","render","update","__childPart","container","partOwnerNode","_$litPart$","connectedCallback","setConnected","disconnectedCallback","$c7e9643701b79b9e$export$cf8e90db1f38da15","$c7e9643701b79b9e$var$o","litElementHydrateSupport","litElementPlatformSupport","$c7e9643701b79b9e$var$n","customElement","classOrDescriptor","clazz","customElements","define","descriptor","kind","elements","standardProperty","placement","originalKey","property","protoOrDescriptor","decorateProperty","finisher","info","query","selector","cache","querySelector","t2","ElementProto","Element","msMatchesSelector","webkitMatchesSelector","orderCup","firstTea","flavoring","handlers","flavoredTea","isPreviousCancelled","cancelled","setTea","teaRefill","context","flavoredTeaRefill","isNaN","isCancelled","handler","cup","order","WeakSet","arguments","resolve","then","has","add","on","fn","server","delete","clear","$ade91c18258be32d$var$initialLCHColor","lch","$ade91c18258be32d$var$initialLabColor","$iGikD","lab","$ade91c18258be32d$var$initialRGBColor","rgb","formatHex","$ade91c18258be32d$var$initialHSLColor","hsl","$ade91c18258be32d$export$a01085967c46d382","$bdf9c0166961c26b$export$52560ccb88336cdf","tea","$ade91c18258be32d$var$clamp","$ade91c18258be32d$export$3024636b4b0c6b28","a","b","$ade91c18258be32d$export$965ed80dcfd05d0d","g","$ade91c18258be32d$export$95f9a6d3e85ef8fb","$ade91c18258be32d$export$43fc8361ae832f9e","$ade91c18258be32d$export$9b0bae227406d2aa","$ade91c18258be32d$export$99f64a3cc89d6540","$ade91c18258be32d$export$6e7bdda404e2b3d3","$ade91c18258be32d$export$ecf247e5458ee42c","$ade91c18258be32d$export$72a79d3ee82f181e","$ade91c18258be32d$export$266877a4eb19af54","$ade91c18258be32d$export$ffeeba1e81a1e0e3","$ade91c18258be32d$export$b72e84d45503298c","$ade91c18258be32d$export$2da8ef7bc0c2c5f1","$ade91c18258be32d$export$d188bccd23acd505","min","number","max","$ade91c18258be32d$var$genLCH","previousLCH","newColor","newLCH","$ade91c18258be32d$var$genLab","previousLab","newLab","$ade91c18258be32d$var$genRGB","previousRGB","newRGB","$ade91c18258be32d$var$genHSL","previousHSL","newHSL","newLch","prevLab","prevRGB","prevHSL","prevLCH","newLuminance","copy","newChroma","newHue","newA","newB","newRed","newGreen","newBlue","newSaturation","newLightness","module","exports","parcelRequire","relativePath","isESM","workerUrl","$jAAjo","getBundleURL","getOrigin","self","location","origin","source","URL","createObjectURL","Blob","$e42d8bdf021a4fcf$export$1b6c708f518305b4","$e42d8bdf021a4fcf$export$da289beea9c5b10d","$e42d8bdf021a4fcf$var$bundleURL","$e42d8bdf021a4fcf$var$getBaseURL","url","replace","err","matches","stack","$e42d8bdf021a4fcf$var$getBundleURL","$1cd2d729795f1096$export$6aa85d045b458f9b","prevWorker","hue","width","height","worker","Worker","terminate","res","onmessage","postMessage","$d2d0b43fc4d4fd39$var$__decorate","decorators","target","desc","getOwnPropertyDescriptor","Reflect","decorate","$d2d0b43fc4d4fd39$export$7d532f1b5d6773be","isPressed","generateColors","updateMarkerPosition","canvas","rect","getBoundingClientRect","x","floor","y","updateCanvasColors","ctx","getContext","colorArray","imageData","ImageData","putImageData","clientX","clientY","changed","$8fa3337b08564c44$export$91100b3ec196ccd","currentTarget","setPointerCapture","pointerId","onPositionChange","releasePointerCapture","$005544cd98856a8e$export$ce8efb75507ffb31","$20ba8642ad7b25f8$export$f5e86181b8261eaa","$09410692ef659667$export$7c233b474a5eb12b","assign","$f67ce61b2531d859$export$95125093767365f","$c4d02e013c6f12aa$var$__decorate","$c4d02e013c6f12aa$var$thumbStyles","$c4d02e013c6f12aa$var$height","$c4d02e013c6f12aa$var$trackStyles","$c4d02e013c6f12aa$export$4a8cf16343d6f05c","step","referenceColor","valueToModify","getBackgroundRange","clearTimeout","throttleId","color","colorToCompare","stringColorToCompare","prevBackgroundRange","prevColor","now","performance","timePrevOp","setTimeout","nbOfPoints","round","Uint8ClampedArray","position","alpha","dataUrl","toDataURL","$d0a0522ecf07d33f$export$c837a8b98c265ae3","$21644288976ebd6f$export$b1264d1b352e73d","addController","listener","$f5fd3083fa946c5c$var$__decorate","$f5fd3083fa946c5c$var$toHex","toString","padStart","$f5fd3083fa946c5c$var$toFixed","decimal","dec","$f5fd3083fa946c5c$var$view","matchMedia","$f5fd3083fa946c5c$export$b0df26fdf780999a","lchController","isMobile","viewListener","mqle","addListener","removeListener","label","shortName","toUpperCase","id","mod","unit","log","keys","size","hexRGB","renderInput","documentElement","backgroundColor"],"version":3,"file":"index.9ad680c4.js.map"}